{"version":3,"sources":["components/Login.js","utils/helpers.js","CSS/textEditorStyles.js","actions/noteActions.js","actions/types.js","components/TextEditor.js","CSS/folderStyles.js","components/Folders.js","CSS/noteStyles.js","components/Notes.js","components/HomePage.js","CSS/theme.js","reducers/noteReducer.js","reducers/index.js","store.js","App.js","index.js"],"names":["useStyles","makeStyles","divs","height","div1","backgroundColor","div2","titleText","marginRight","marginLeft","marginTop","marginBottom","fontSize","fontWeight","textAlign","subText","video","width","loginButton","Login","classes","CssBaseline","Grid","container","className","item","xs","style","display","alignItems","flexDirection","Typography","variant","Button","href","disableElevation","title","src","frameborder","allowfullscreen","debounce","func","wait","timeout","args","later","clearTimeout","setTimeout","theme","editorLangForm","minWidth","marks","borderRadius","marksSelected","markButtons","color","addEditor","addEditorTxt","lineHeight","notUpdatingTitle","updatingTitle","notSaving","saving","notesInFolder","folder","dispatch","axios","post","then","res","data","notes","updatedNotes","map","n","selected","type","payload","setCurEditorValue","value","selectNote","toggleMark","editor","format","isMarkActive","Editor","removeMark","addMark","toggleBlock","language","isActive","isBlockActive","editorId","Math","floor","random","Transforms","setNodes","editorValue","nodes","match","Leaf","attributes","children","leaf","bold","italic","underline","noNoteText","text","TextEditor","useDispatch","selectedNote","useSelector","state","noteJSON","curEditorJSON","useState","setLanguage","setOpen","setBold","setUnderline","setItalic","noteTitle","setNoteTitle","updateTitleCheck","setUpdateTitleCheck","saveCheck","setSaveCheck","tempValue","setTempValue","redirectToHome","setRedirectToHome","useMemo","withReact","createEditor","renderLeaf","useCallback","props","renderElement","Element","useEffect","_","isEmpty","JSON","parse","content","updateTitle","id","_id","console","log","element","AceElement","noteJSON2","updatedCode","handleCodeChange","newValue","node","contentEditable","mode","onChange","onClick","insertNode","minHeight","to","AppBar","position","Toolbar","IconButton","edge","onMouseDown","event","preventDefault","FormControl","InputLabel","Select","target","onClose","onOpen","labelId","MenuItem","TextField","label","defaultValue","e","CircularProgress","size","stringify","get","logout","onKeyDown","isHotkey","addFolder","folderButton","folderBtnTextReg","borderBottom","folderBtnTextSelected","deleteFolder","form","addFolderModal","modalInput","addFolderSubmit","margin","rand","round","getModalStyle","top","left","transform","Folders","open","folders","setFolders","folderName","setfolderName","getNotes","persist","currentTarget","dataset","newFolders","user","window","alert","folderObject","modalBody","onSubmit","push","List","folderObj","ListItem","button","data-value","key","ListItemIcon","ListItemText","primary","length","filter","val","Modal","searchNote","addNote","addNoteButton","note","noteBtnTextReg","noteBtnTextSelected","deleteFolderBtn","noNotes","Notes","displayNote","find","getSelectedNote","searchNotes","filteredNotes","includes","some","el","filtered","noValidate","autoComplete","InputProps","startAdornment","InputAdornment","listItemClass","classNames","noteBtnTextHighlighted","updateNotesInFolder","borderRight","div3","HomePage","createMuiTheme","palette","action","light","main","dark","typography","fontFamily","h6","body2","initialState","combineReducers","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","ThemeProvider","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c975050d.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    divs: {\n        height: '100vh',\n    },\n    div1: {\n        backgroundColor: '#fff',\n    },\n    div2: {\n        backgroundColor: '#000',\n    },\n    titleText: {\n        marginRight: '1vw',\n        marginLeft: '1vw',\n        marginTop: '25vh',\n        marginBottom: '3vh',\n        fontSize: '40px',\n        fontWeight: '400',\n        textAlign: 'center',\n    },\n    subText: {\n        marginBottom: '1vh',\n    },\n    video: {\n        marginTop: '10vh',\n        marginLeft: '5vw',\n        width: '40vw',\n        height: '80vh'\n    },\n    loginButton: {},\n});\n\nconst Login = () => {\n    const classes = useStyles();\n\n    return (\n        <CssBaseline>\n            <Grid container className={classes.divs}>\n                <Grid item xs={6} className={classes.div1}>\n                    <div\n                        style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            flexDirection: 'column',\n                        }}\n                    >\n                        <br />\n                        <Typography variant=\"h5\" className={classes.titleText}>\n                            Log in with Github to access Code Note\n                        </Typography>\n                        <Typography variant=\"body1\" className={classes.subText}>\n                            You’ll be logged in for 14 days unless you log out\n                            manually.\n                        </Typography>\n                        <br />\n                        <Button\n                            variant=\"contained\"\n                            href=\"http://localhost:5000/auth/github\"\n                            disableElevation\n                            className={classes.loginButton}\n                        >\n                            Login\n                        </Button>\n                    </div>\n                </Grid>\n                <Grid item xs={6} className={classes.div2}>\n                    <iframe\n                        title=\"vimeo-player\"\n                        src=\"https://player.vimeo.com/video/446649813\"\n                        frameborder=\"0\"\n                        allowfullscreen\n                        className={classes.video}\n                    ></iframe>\n                </Grid>\n            </Grid>\n        </CssBaseline>\n    );\n};\n\nexport default Login;\n","export const debounce = (func, wait) => {\n    let timeout;\n\n    return function executedFunc(...args) {\n        const later = () => {\n            timeout = null;\n\n            func(...args);\n        };\n\n        clearTimeout(timeout);\n\n        timeout = setTimeout(later, wait)\n    };\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    editorLangForm: {\n        marginLeft: '10px',\n        marginRight: '10px',\n        width: '9vw',\n        minWidth: '70px'\n    },\n    marks: {\n        fontSize: 20,\n        backgroundColor: '#fff',\n        '&:hover': {\n            backgroundColor: '#bdbdbd',\n        },\n        borderRadius: '5px',\n    },\n    marksSelected: {\n        fontSize: '1.4vw',\n        backgroundColor: '#bdbdbd',\n        borderRadius: '5px'\n    },\n    markButtons: {\n        color: '#000',\n        backgroundColor: '#fff',\n        '&:hover': {\n            backgroundColor: '#fff',\n        },\n    },\n    addEditor: {\n        height: '40px',\n        width: '4.75vw',\n        backgroundColor: '#000',\n        '&:hover': {\n            backgroundColor: '#bdbdbd',\n        },\n        marginRight: '10px'\n    },\n    addEditorTxt: {\n        lineHeight: '1.4 !important',\n        color: '#fff',\n    },\n    notUpdatingTitle: {\n        color: '#000',\n        display: 'none',\n    },\n    updatingTitle: {\n        color: '#000',\n    },\n    notSaving: {\n        color: '#000',\n        display: 'none'\n    },\n    saving: {\n        color: '#000'\n    },\n}));\n\nexport default useStyles;","import {\n    CUR_FOLDER_NOTES,\n    SELECTED_NOTE,\n    CUR_EDITOR_JSON,\n    SELECT_NOTE,\n    DELETE_FOLDER,\n    DELETE_NOTE,\n    UPDATE_NOTES_IN_FOLDER,\n} from './types';\nimport axios from 'axios';\n\nexport const notesInFolder = (folder) => (dispatch) => {\n    axios\n        .post('/notesInFolder', {\n            folder: folder,\n        })\n        .then((res) => {\n            return res.data;\n        })\n        .then((notes) => {\n            const updatedNotes = notes.map((n) => {\n                return { ...n, selected: false };\n            });\n            dispatch({\n                type: CUR_FOLDER_NOTES,\n                payload: updatedNotes,\n            });\n        });\n};\n\nexport const getSelectedNote = (id, notes) => (dispatch) => {\n    const selectedNote = notes.find((note) => note._id === id);\n    dispatch({ type: SELECTED_NOTE, payload: selectedNote });\n};\n\nexport const setCurEditorValue = (value) => (dispatch) => {\n    dispatch({ type: CUR_EDITOR_JSON, payload: value });\n};\n\nexport const selectNote = (updatedNotes) => (dispatch) => {\n    dispatch({ type: SELECT_NOTE, payload: updatedNotes });\n};\n\nexport const deleteNotesInFolder = () => (dispatch) => {\n    dispatch({ type: DELETE_FOLDER, payload: [] });\n};\n\nexport const deleteSelectedNote = () => (dispatch) => {\n    dispatch({ type: DELETE_NOTE, payload: {} });\n};\n\nexport const updateNotesInFolder = (updatedNotes) => (dispatch) => {\n    dispatch({ type: UPDATE_NOTES_IN_FOLDER, payload: updatedNotes });\n};\n","export const CUR_FOLDER_NOTES = 'CUR_FOLDER_NOTES'\nexport const SELECTED_NOTE = 'SELECTED_NOTE'\nexport const CUR_EDITOR_JSON = 'CUR_EDITOR_VALUE'\nexport const SELECT_NOTE = 'SELECT_NOTE'\nexport const DELETE_FOLDER = 'DELETE_FOLDER'\nexport const DELETE_NOTE = 'DELETE_NOTE'\nexport const UPDATE_NOTES_IN_FOLDER = 'UPDATE_NOTES_IN_FOLDER'","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/mode/python';\nimport 'brace/mode/html';\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai';\nimport isHotkey from 'is-hotkey';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport { debounce } from '../utils/helpers';\n\n// Slate\nimport { Editable, withReact, Slate } from 'slate-react';\nimport { Editor, createEditor, Transforms } from 'slate';\n\n// Material UI\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlineIcon from '@material-ui/icons/FormatUnderlined';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useStyles from '../CSS/textEditorStyles';\n\nimport { setCurEditorValue, updateNotesInFolder } from '../actions/noteActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography } from '@material-ui/core';\n\nconst TextEditor = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const selectedNote = useSelector((state) => state.notes.selectedNote);\n    const noteJSON = useSelector((state) => state.notes.curEditorJSON);\n\n    const [language, setLanguage] = useState('javascript');\n    const [open, setOpen] = useState(false);\n    const [bold, setBold] = useState(false);\n    const [underline, setUnderline] = useState(false);\n    const [italic, setItalic] = useState(false);\n    const [noteTitle, setNoteTitle] = useState(selectedNote.title);\n    const [updateTitleCheck, setUpdateTitleCheck] = useState(false);\n    const [saveCheck, setSaveCheck] = useState(false);\n    const [tempValue, setTempValue] = useState(noNoteText);\n    const [redirectToHome, setRedirectToHome] = useState(false);\n\n    const editor = useMemo(() => withReact(createEditor()), []);\n    const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\n    const renderElement = useCallback((props) => <Element {...props} />, []);\n\n    useEffect(() => {\n        if (!_.isEmpty(selectedNote)) {\n            dispatch(setCurEditorValue(JSON.parse(selectedNote.content)));\n        }\n        setBold(false);\n        setUnderline(false);\n        setItalic(false);\n        setNoteTitle(selectedNote.title);\n    }, [selectedNote]);\n\n    const handleChange = (event) => {\n        setLanguage(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleTitleChange = (event) => {\n        setNoteTitle(event.target.value);\n        debounce(() => {\n            axios\n                .post('/updateNote', {\n                    id: selectedNote._id,\n                    content: selectedNote.content,\n                    title: noteTitle,\n                })\n                .then((res) => {\n                    console.log(res);\n                });\n        }, 1000);\n        setUpdateTitleCheck(false);\n    };\n\n    const updateTitle = debounce((value) => {\n        axios\n            .post('/updateNote', {\n                id: selectedNote._id,\n                content: selectedNote.content,\n                title: value,\n            })\n            .then((res) => {\n                console.log(res);\n            });\n        setUpdateTitleCheck(false);\n    }, 3000);\n\n    const logout = () => {\n        axios\n            .get('/logout')\n            .then((res) => res.data)\n            .then((data) => {\n                if (data.logout) {\n                    setRedirectToHome(true);\n                }\n            });\n    };\n\n    const Element = (props) => {\n        const { attributes, children, element } = props;\n        switch (element.type) {\n            case 'code':\n                return <AceElement {...props} />;\n            default:\n                return (\n                    <p style={{ fontSize: '16px' }} {...attributes}>\n                        {children}\n                    </p>\n                );\n        }\n    };\n\n    const AceElement = ({ attributes, children, element }) => {\n        const noteJSON2 = useSelector((state) => state.notes.curEditorJSON);\n        var updatedCode = [];\n\n        const onClick = () => {\n            Editor.insertNode(editor, {\n                children: [{ text: '' }],\n            });\n        };\n\n        var handleCodeChange = debounce((newValue, editorId) => {\n            updatedCode = noteJSON2.map((node) => {\n                return node.editorId === editorId\n                    ? { ...node, editorValue: newValue }\n                    : { ...node };\n            });\n            dispatch(setCurEditorValue(updatedCode));\n        }, 1500);\n\n        return (\n            <>\n                <div contentEditable={false} style={{ marginLeft: '10px' }}>\n                    <AceEditor\n                        height=\"250px\"\n                        width=\"600px\"\n                        fontSize='14px'\n                        mode={element.language}\n                        theme=\"monokai\"\n                        value={element.editorValue}\n                        onChange={(newValue) =>\n                            handleCodeChange(newValue, element.editorId)\n                        }\n                    />\n                </div>\n                <p\n                    {...attributes}\n                    style={{ marginLeft: '10px', marginRight: '10px' }}\n                    onClick={onClick}\n                    contentEditable={false}\n                >\n                    {children}\n                </p>\n            </>\n        );\n    };\n\n    return (\n        <div\n            style={{\n                backgroundColor: '#fff',\n                minHeight: '50vh',\n                width: '50vw',\n            }}\n        >\n            {' '}\n            {redirectToHome ? (\n                <Redirect to=\"/\" />\n            ) : (\n                <Slate\n                    editor={editor}\n                    value={_.isEmpty(selectedNote) ? tempValue : noteJSON}\n                    onChange={(newValue) => {\n                        if (_.isEmpty(selectedNote)) {\n                            setTempValue(newValue);\n                        } else {\n                            dispatch(setCurEditorValue(newValue));\n                        }\n                    }}\n                >\n                    <AppBar position=\"static\">\n                        <Toolbar>\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                onMouseDown={(event) => {\n                                    event.preventDefault();\n                                    setBold(!bold);\n                                    toggleMark(editor, 'bold');\n                                }}\n                            >\n                                <FormatBoldIcon\n                                    className={\n                                        bold\n                                            ? classes.marksSelected\n                                            : classes.marks\n                                    }\n                                />\n                            </IconButton>\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                onMouseDown={(event) => {\n                                    event.preventDefault();\n                                    setUnderline(!underline);\n                                    toggleMark(editor, 'underline');\n                                }}\n                            >\n                                <FormatUnderlineIcon\n                                    className={\n                                        underline\n                                            ? classes.marksSelected\n                                            : classes.marks\n                                    }\n                                />\n                            </IconButton>\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                onMouseDown={(event) => {\n                                    event.preventDefault();\n                                    setItalic(!italic);\n                                    toggleMark(editor, 'italic');\n                                }}\n                            >\n                                <FormatItalicIcon\n                                    className={\n                                        italic\n                                            ? classes.marksSelected\n                                            : classes.marks\n                                    }\n                                />\n                            </IconButton>\n                            <FormControl className={classes.editorLangForm}>\n                                <InputLabel style={{}}>Language</InputLabel>\n                                <Select\n                                    value={language}\n                                    onChange={handleChange}\n                                    onClose={handleClose}\n                                    onOpen={handleOpen}\n                                    labelId=\"demo-controlled-open-select-label\"\n                                    id=\"demo-controlled-open-select\"\n                                    style={{ marginRight: '10px' }}\n                                >\n                                    <MenuItem value=\"javascript\">\n                                        Javascript\n                                    </MenuItem>\n                                    <MenuItem value=\"html\">HTML</MenuItem>\n                                    <MenuItem value=\"python\">Python</MenuItem>\n                                    <MenuItem value=\"mysql\">SQL</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <Button\n                                variant=\"contained\"\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    toggleBlock(editor, 'code', language);\n                                }}\n                                className={classes.addEditor}\n                                disableElevation\n                            >\n                                <Typography\n                                    variant=\"body2\"\n                                    className={classes.addEditorTxt}\n                                >\n                                    Add Editor\n                                </Typography>\n                            </Button>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Title\"\n                                defaultValue={noteTitle}\n                                style={{ marginRight: '10px' }}\n                                onChange={(e) => {\n                                    setUpdateTitleCheck(true);\n                                    updateTitle(e.target.value);\n                                }}\n                                className={classes.editorLangForm}\n                            />\n                            <CircularProgress\n                                className={\n                                    updateTitleCheck\n                                        ? classes.updatingTitle\n                                        : classes.notUpdatingTitle\n                                }\n                                size={20}\n                            />\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                style={{ marginLeft: '1vw' }}\n                                onClick={() => {\n                                    if (_.isEmpty(selectedNote)) {\n                                        return;\n                                    }\n                                    setSaveCheck(true);\n                                    axios\n                                        .post('/updateNote', {\n                                            id: selectedNote._id,\n                                            content: JSON.stringify(noteJSON),\n                                            title: selectedNote.title,\n                                        })\n                                        .then((res) => {\n                                            console.log(res);\n                                        });\n                                    setTimeout(() => {\n                                        setSaveCheck(false);\n                                    }, 1000);\n                                }}\n                            >\n                                <SaveIcon className={classes.marks} />\n                            </IconButton>\n                            <CircularProgress\n                                className={\n                                    saveCheck\n                                        ? classes.saving\n                                        : classes.notSaving\n                                }\n                                size={20}\n                            />\n                            <IconButton onClick={() => logout()} className={classes.markButtons}>\n                                <ExitToAppIcon className={classes.marks}/>\n                            </IconButton>\n                        </Toolbar>\n                    </AppBar>\n                    <Editable\n                        renderElement={renderElement}\n                        renderLeaf={renderLeaf}\n                        onKeyDown={(event) => {\n                            if (isHotkey('mod+s', event)) {\n                                event.preventDefault();\n                                setSaveCheck(true);\n                                axios\n                                    .post('/updateNote', {\n                                        id: selectedNote._id,\n                                        content: JSON.stringify(noteJSON),\n                                    })\n                                    .then((res) => {\n                                        console.log(res);\n                                    });\n                                setTimeout(() => {\n                                    setSaveCheck(false);\n                                }, 1000);\n                            }\n                        }}\n                    />\n                </Slate>\n            )}\n        </div>\n    );\n};\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format);\n\n    if (isActive) {\n        Editor.removeMark(editor, format);\n    } else {\n        Editor.addMark(editor, format, true);\n    }\n};\n\nconst toggleBlock = (editor, format, language) => {\n    const isActive = isBlockActive(editor, format);\n    const editorId = Math.floor(Math.random() * 1000 + 1);\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'default' : 'code',\n        language,\n        editorValue: 'starter',\n        editorId,\n    });\n};\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor);\n    return marks ? marks[format] === true : false;\n};\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: (n) => n.type === format,\n    });\n\n    return !!match;\n};\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>;\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>;\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>;\n    }\n\n    return <span {...attributes}>{children}</span>;\n};\n\nconst noNoteText = [\n    {\n        children: [\n            {\n                text: 'No note selected - Changes will not be saved',\n            },\n        ],\n    },\n];\n\nexport default TextEditor;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    addFolder: {\n        color: '#fff',\n        fontSize: 50,\n        '&:hover': {\n            backgroundColor: '#bdbdbd',\n        },\n        borderRadius: '10px',\n        display: 'block',\n    },\n    folderButton: {\n        backgroundColor: 'primary',\n    },\n    folderBtnTextReg: {\n        color: '#fff',\n        '&:hover': {\n            borderBottom: '1px solid #fff',\n        },\n        fontWeight: 'bold',\n    },\n    folderBtnTextSelected: {\n        color: '#fff',\n        borderBottom: '1px solid #fff',\n        fontWeight: 'bold',\n    },\n    deleteFolder: {\n        color: '#0166FF',\n        display: 'block',\n        fontSize: 40,\n        backgroundColor: '#000',\n        '&:hover': {\n            backgroundColor: '#bdbdbd',\n        },\n        borderRadius: '10px',\n    },\n    form: {},\n    addFolderModal: {\n        width: '30vw',\n        height: '30vh',\n        backgroundColor: '#fff',\n        marginLeft: '35vw',\n        marginTop: '35vh',\n        textAlign: 'center',\n    },\n    modalInput: {\n        marginTop: '20px',\n        marginBottom: '30px'\n    },\n    addFolderSubmit: {\n        display: 'block',\n        margin: 'auto',\n    },\n}));\n\nexport default useStyles;\n","import React, { useState, useEffect } from 'react';\n\n// Material-ui\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport useStyles from '../CSS/folderStyles';\n\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notesInFolder, deleteNotesInFolder } from '../actions/noteActions';\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst Folders = () => {\n    const classes = useStyles();\n\n    const [open, setOpen] = useState(false);\n    const [modalStyle] = useState(getModalStyle);\n    const [folders, setFolders] = useState([]);\n    const [folderName, setfolderName] = useState('');\n\n    const notes = useSelector((state) => state.notes.notes);\n    const dispatch = useDispatch();\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        axios.post('/addFolder', {\n            folder: folderName,\n        });\n        setFolders(() => {\n            folders.push({ folder: folderName, selected: false });\n            return folders;\n        });\n    };\n\n    const handleChange = (event) => {\n        setfolderName(event.target.value);\n    };\n\n    const getNotes = (event) => {\n        event.persist();\n        const value = event.currentTarget.dataset.value;\n        const newFolders = folders.map((folder) =>\n            folder.folder === value\n                ? { ...folder, selected: true }\n                : { ...folder, selected: false }\n        );\n        setFolders(newFolders);\n        dispatch(notesInFolder(value));\n    };\n\n    const deleteFolder = () => {\n        if (notes.length === 0) {\n            window.alert('No folder selected');\n        } else {\n            window.alert(\n                'Are you sure you want to delete the selected folder?'\n            );\n            axios.post('/deleteFolder', { folder: notes[0].folder });\n            setFolders(() =>\n                folders.filter((val) => !(val.folder === notes[0].folder))\n            );\n            dispatch(deleteNotesInFolder());\n        }\n    };\n\n    useEffect(() => {\n        axios\n            .get('/folders')\n            .then((res) => {\n                return res.data;\n            })\n            .then((res) => {\n                if (!res.user) {\n                    window.alert(\n                        'Practice Environment, You are not logged in.'\n                    );\n                }\n                const folderObject = res.folders.map((folder) => {\n                    return { folder: folder, selected: false };\n                });\n                setFolders(folderObject);\n            });\n    }, []);\n\n    const modalBody = (\n        <div className={classes.addFolderModal}>\n            <form onSubmit={handleSubmit} className={classes.form}>\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Folder Name\"\n                    variant=\"outlined\"\n                    onChange={handleChange}\n                    className={classes.modalInput}\n                />\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    className={classes.addFolderSubmit}\n                    disableElevation\n                >\n                    Submit\n                </Button>\n            </form>\n        </div>\n    );\n\n    return (\n        <div>\n            <List style={{ marginTop: '0px' }}>\n                {folders.map((folderObj) => {\n                    return (\n                        <ListItem\n                            button\n                            onClick={getNotes}\n                            data-value={folderObj.folder}\n                            className={classes.folderButton}\n                            key={folderObj.folder}\n                        >\n                            <ListItemIcon>\n                                <FolderIcon style={{ color: '#0166FF' }} />\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={\n                                    <Typography variant=\"h6\">\n                                        {folderObj.folder}\n                                    </Typography>\n                                }\n                                value={folderObj.folder}\n                                className={\n                                    folderObj.selected\n                                        ? classes.folderBtnTextSelected\n                                        : classes.folderBtnTextReg\n                                }\n                            />\n                        </ListItem>\n                    );\n                })}\n                <IconButton onClick={handleOpen}>\n                    <AddCircleIcon className={classes.addFolder} />\n                </IconButton>\n                <Typography\n                    display=\"inline\"\n                    variant=\"button\"\n                    style={{ color: '#fff' }}\n                >\n                    Add Folder\n                </Typography>\n                <br />\n                <IconButton edge=\"end\" onClick={deleteFolder}>\n                    <DeleteIcon className={classes.deleteFolder} />\n                </IconButton>\n                <Typography\n                    display=\"inline\"\n                    variant=\"button\"\n                    style={{ color: '#fff', marginLeft: '19px' }}\n                >\n                    Delete Folder\n                </Typography>\n            </List>\n            <Modal open={open} onClose={handleClose}>\n                {modalBody}\n            </Modal>\n        </div>\n    );\n};\n\nexport default Folders;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    searchNote: {\n        textAlign: 'center',\n        marginBottom: '2vh',\n    },\n    addNote: {\n        fontSize: 50,\n        color: '#000',\n        textAlign: 'center',\n        backgroundColor: '#fff',\n        '&:hover': {\n            backgroundColor: '#bdbdbd',\n        },\n        borderRadius: '10px',\n    },\n    addNoteButton: {\n        color: '#000',\n        textAlign: 'center',\n        backgroundColor: '#fff',\n        '&:hover': {\n            backgroundColor: '#fff',\n        },\n    },\n    note: {\n        backgroundColor: '#fff',\n        '&:hover': {\n            backgroundColor: '#fff',\n        },\n    },\n    noteBtnTextReg: {\n        color: '#000',\n        '&:hover': {\n            borderBottom: '1px solid #000',\n        },\n    },\n    noteBtnTextSelected: {\n        color: '#000',\n        borderBottom: '1px solid #000',\n    },\n    deleteFolder: {\n        color: '#0166FF',\n        display: 'block',\n        fontSize: 40,\n        backgroundColor: '#000',\n        '&:hover': {\n            backgroundColor: '#bdbdbd'\n        },\n        borderRadius: '10px'\n    },\n    deleteFolderBtn: {\n        backgroundColor: '#fff',\n        '&:hover': {\n            backgroundColor: '#fff'\n        }\n    },\n    noNotes: {\n        marginLeft: '1vw',\n        marginBottom: '2vh',\n        marginTop: '2vh',\n    },\n}));\n\nexport default useStyles;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    getSelectedNote,\n    notesInFolder,\n    selectNote,\n    deleteSelectedNote,\n    updateNotesInFolder,\n} from '../actions/noteActions';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport { debounce } from '../utils/helpers';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from '../CSS/noteStyles';\nimport '../CSS/noteStyles.css';\n\nconst Notes = () => {\n    const classes = useStyles();\n\n    const notes = useSelector((state) => state.notes.notes);\n    const selectedNote = useSelector((state) => state.notes.selectedNote);\n    const dispatch = useDispatch();\n\n    const displayNote = (event) => {\n        event.persist();\n        const value = event.currentTarget.dataset.value;\n        const updatedNotes = notes.map((note) =>\n            note._id === value\n                ? { ...note, selected: true }\n                : { ...note, selected: false }\n        );\n        dispatch(selectNote(updatedNotes));\n        dispatch(getSelectedNote(value, notes));\n    };\n\n    const addNote = () => {\n        const folder = notes[0].folder;\n        axios\n            .post('/addNote', {\n                folder: folder,\n            })\n            .then((res) => {\n                console.log(res);\n            });\n        dispatch(notesInFolder(folder));\n    };\n\n    const deleteNote = () => {\n        if (_.isEmpty(selectedNote)) {\n            window.alert('No note selected');\n        } else {\n            window.alert('Are you sure you want to delete the selected note?');\n            axios\n                .post('/deleteNote', {\n                    id: selectedNote._id,\n                })\n                .then((res) => {\n                    console.log(res);\n                });\n\n            const updatedNotes = notes.filter(\n                (note) => !(note._id === selectedNote._id)\n            );\n            dispatch(updateNotesInFolder(updatedNotes));\n            dispatch(deleteSelectedNote());\n        }\n    };\n\n    const searchNotes = debounce((value) => {\n        if (value !== '') {\n            const filteredNotes = notes.filter((note) =>\n                note.content.includes(value)\n            );\n            const updatedNotes = notes.map((note) => {\n                if (filteredNotes.some((el) => el._id === note._id)) {\n                    return { ...note, filtered: true };\n                }\n                return { ...note, filtered: false };\n            });\n            dispatch(selectNote(updatedNotes));\n        } else {\n            const updatedNotes = notes.map((note) => {\n                return { ...note, filtered: false };\n            });\n            dispatch(selectNote(updatedNotes))\n        }\n    }, 1000);\n\n    return (\n        <div>\n            <List>\n                <form\n                    noValidate\n                    autoComplete=\"off\"\n                    className={classes.searchNote}\n                >\n                    <TextField\n                        label=\"Search Notes\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onChange={(e) => searchNotes(e.target.value)}\n                    />\n                </form>\n                {notes.length > 0 ? (\n                    notes.map((note) => {\n                        let listItemClass = classNames({\n                            noteBtnTextSelected: note.selected,\n                            noteBtnTextReg: !note.selected,\n                            noteBtnTextHighlighted: note.filtered,\n                        });\n                        return (\n                            <ListItem\n                                button\n                                onClick={displayNote}\n                                data-value={note._id}\n                                className={classes.note}\n                                key={note._id}\n                            >\n                                <ListItemText\n                                    primary={note.title}\n                                    className={listItemClass}\n                                />\n                            </ListItem>\n                        );\n                    })\n                ) : (\n                    <Typography\n                        variant=\"body1\"\n                        display=\"block\"\n                        className={classes.noNotes}\n                    >\n                        No Notes\n                    </Typography>\n                )}\n                <IconButton onClick={addNote} className={classes.addNoteButton}>\n                    <AddCircleIcon className={classes.addNote} />\n                </IconButton>\n                <Typography variant=\"body1\" display=\"inline\">\n                    Add Note\n                </Typography>\n                <br />\n                <IconButton\n                    edge=\"end\"\n                    className={classes.deleteFolderBtn}\n                    onClick={deleteNote}\n                >\n                    <DeleteIcon className={classes.deleteFolder} />\n                </IconButton>\n                <Typography\n                    display=\"inline\"\n                    variant=\"button\"\n                    style={{ color: '#000', marginLeft: '19px' }}\n                >\n                    Delete Note\n                </Typography>\n            </List>\n        </div>\n    );\n};\n\nexport default Notes;\n","import React from 'react';\n\nimport TextEditor from './TextEditor';\nimport Folders from './Folders';\nimport Notes from './Notes';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles({\n    divs: {\n        height: '100vh',\n    },\n    div1: {\n        backgroundColor: '#000',\n    },\n    div2: {\n        backgroundColor: '#fff',\n        borderRight: '1px solid #000',\n    },\n    div3: {\n        backgroundColor: '#eee',\n    },\n});\n\nconst HomePage = () => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Grid container className={classes.divs}>\n                <Grid item xs={3} className={classes.div1}>\n                    <Folders />\n                </Grid>\n                <Grid item xs={3} className={classes.div2}>\n                    <Notes />\n                </Grid>\n                <Grid item xs={6} className={classes.div3}>\n                    <TextEditor />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default HomePage;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    palette: {\n        action: {\n            selected: '#fff',\n        },\n        primary: {\n            light: '#1F1F1F',\n            main: '#1414141',\n            dark: '#0A0A0A',\n        },\n    },\n    typography: {\n        fontFamily: 'Roboto',\n        h6: {\n            fontWeight: 'bold',\n        },\n        body2: {\n            fontSize: '12px'\n        }\n    },\n});\n\nexport default theme;\n","import {\n    CUR_FOLDER_NOTES,\n    SELECTED_NOTE,\n    CUR_EDITOR_JSON,\n    SELECT_NOTE,\n    DELETE_FOLDER,\n    DELETE_NOTE,\n    UPDATE_NOTES_IN_FOLDER\n} from '../actions/types';\n\nconst initialState = {\n    notes: [],\n    selectedNote: {},\n    curEditorJSON: [\n        {\n            children: [\n                {\n                    text: 'Starter Text',\n                },\n            ],\n        },\n    ],\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CUR_FOLDER_NOTES:\n            return {\n                ...state,\n                notes: action.payload,\n            };\n        case SELECTED_NOTE:\n            return {\n                ...state,\n                selectedNote: action.payload,\n            };\n        case CUR_EDITOR_JSON:\n            return {\n                ...state,\n                curEditorJSON: action.payload,\n            };\n        case SELECT_NOTE:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        case DELETE_FOLDER:\n            return {\n                ...state,\n                notes: action.payload\n            }\n        case DELETE_NOTE:\n            return {\n                ...state,\n                selectedNote: action.payload\n            }\n        case UPDATE_NOTES_IN_FOLDER: \n            return {\n                ...state,\n                notes: action.payload\n            }\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux'\nimport noteReducer from './noteReducer'\n\nexport default combineReducers({\n    notes: noteReducer\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        // window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        //     window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n);\n\nexport default store;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './components/Login';\nimport HomePage from './components/HomePage';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './CSS/theme'\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Provider store={store}>\n                <CssBaseline />\n                <BrowserRouter>\n                    <Switch>\n                        <Route path=\"/\" exact component={Login} />\n                        <Route path=\"/HomePage\" exact component={HomePage} />\n                    </Switch>\n                </BrowserRouter>\n            </Provider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}