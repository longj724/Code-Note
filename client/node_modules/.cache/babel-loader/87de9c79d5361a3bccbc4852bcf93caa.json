{"ast":null,"code":"import _objectSpread from\"/Users/justinlong/Documents/react/code-note2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{useSelector,useDispatch}from'react-redux';import{getSelectedNote,notesInFolder,selectNote,deleteSelectedNote,updateNotesInFolder}from'../actions/noteActions';import axios from'axios';import _ from'lodash';import classNames from'classnames';import{debounce}from'../utils/helpers';import List from'@material-ui/core/List';import ListItem from'@material-ui/core/ListItem';import ListItemText from'@material-ui/core/ListItemText';import TextField from'@material-ui/core/TextField';import InputAdornment from'@material-ui/core/InputAdornment';import IconButton from'@material-ui/core/IconButton';import SearchIcon from'@material-ui/icons/Search';import AddCircleIcon from'@material-ui/icons/AddCircle';import DeleteIcon from'@material-ui/icons/Delete';import Typography from'@material-ui/core/Typography';import useStyles from'../CSS/noteStyles';import'../CSS/noteStyles.css';var Notes=function Notes(){var classes=useStyles();var notes=useSelector(function(state){return state.notes.notes;});var selectedNote=useSelector(function(state){return state.notes.selectedNote;});var dispatch=useDispatch();var displayNote=function displayNote(event){event.persist();var value=event.currentTarget.dataset.value;var updatedNotes=notes.map(function(note){return note._id===value?_objectSpread({},note,{selected:true}):_objectSpread({},note,{selected:false});});dispatch(selectNote(updatedNotes));dispatch(getSelectedNote(value,notes));};var addNote=function addNote(){var folder=notes[0].folder;axios.post('/addNote',{folder:folder}).then(function(res){console.log(res);});dispatch(notesInFolder(folder));};var deleteNote=function deleteNote(){if(_.isEmpty(selectedNote)){window.alert('No note selected');}else{window.alert('Are you sure you want to delete the selected note?');axios.post('/deleteNote',{id:selectedNote._id}).then(function(res){console.log(res);});var updatedNotes=notes.filter(function(note){return!(note._id===selectedNote._id);});dispatch(updateNotesInFolder(updatedNotes));dispatch(deleteSelectedNote());}};var searchNotes=debounce(function(value){if(value!==''){var filteredNotes=notes.filter(function(note){return note.content.includes(value);});var updatedNotes=notes.map(function(note){if(filteredNotes.some(function(el){return el._id===note._id;})){return _objectSpread({},note,{filtered:true});}return _objectSpread({},note,{filtered:false});});dispatch(selectNote(updatedNotes));}else{var _updatedNotes=notes.map(function(note){return _objectSpread({},note,{filtered:false});});dispatch(selectNote(_updatedNotes));}},1000);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(List,null,/*#__PURE__*/React.createElement(\"form\",{noValidate:true,autoComplete:\"off\",className:classes.searchNote},/*#__PURE__*/React.createElement(TextField,{label:\"Search Notes\",InputProps:{startAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"start\"},/*#__PURE__*/React.createElement(SearchIcon,null))},onChange:function onChange(e){return searchNotes(e.target.value);}})),notes.length>0?notes.map(function(note){var listItemClass=classNames({noteBtnTextSelected:note.selected,noteBtnTextReg:!note.selected,noteBtnTextHighlighted:note.filtered});return/*#__PURE__*/React.createElement(ListItem,{button:true,onClick:displayNote,\"data-value\":note._id,className:classes.note,key:note._id},/*#__PURE__*/React.createElement(ListItemText,{primary:note.title,className:listItemClass}));}):/*#__PURE__*/React.createElement(Typography,{variant:\"body1\",display:\"block\",className:classes.noNotes},\"No Notes\"),/*#__PURE__*/React.createElement(IconButton,{onClick:addNote,className:classes.addNoteButton},/*#__PURE__*/React.createElement(AddCircleIcon,{className:classes.addNote})),/*#__PURE__*/React.createElement(Typography,{variant:\"body1\",display:\"inline\"},\"Add Note\"),/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(IconButton,{edge:\"end\",className:classes.deleteFolderBtn,onClick:deleteNote},/*#__PURE__*/React.createElement(DeleteIcon,{className:classes.deleteFolder})),/*#__PURE__*/React.createElement(Typography,{display:\"inline\",variant:\"button\",style:{color:'#000',marginLeft:'19px'}},\"Delete Note\")));};export default Notes;","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/components/Notes.js"],"names":["React","useSelector","useDispatch","getSelectedNote","notesInFolder","selectNote","deleteSelectedNote","updateNotesInFolder","axios","_","classNames","debounce","List","ListItem","ListItemText","TextField","InputAdornment","IconButton","SearchIcon","AddCircleIcon","DeleteIcon","Typography","useStyles","Notes","classes","notes","state","selectedNote","dispatch","displayNote","event","persist","value","currentTarget","dataset","updatedNotes","map","note","_id","selected","addNote","folder","post","then","res","console","log","deleteNote","isEmpty","window","alert","id","filter","searchNotes","filteredNotes","content","includes","some","el","filtered","searchNote","startAdornment","e","target","length","listItemClass","noteBtnTextSelected","noteBtnTextReg","noteBtnTextHighlighted","title","noNotes","addNoteButton","deleteFolderBtn","deleteFolder","color","marginLeft"],"mappings":"2KAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OACIC,eADJ,CAEIC,aAFJ,CAGIC,UAHJ,CAIIC,kBAJJ,CAKIC,mBALJ,KAMO,wBANP,CAOA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CAEA,MAAOC,CAAAA,IAAP,KAAiB,wBAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,4BAArB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kCAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,8BAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,2BAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,8BAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,2BAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,8BAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,mBAAtB,CACA,MAAO,uBAAP,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAChB,GAAMC,CAAAA,OAAO,CAAGF,SAAS,EAAzB,CAEA,GAAMG,CAAAA,KAAK,CAAGxB,WAAW,CAAC,SAACyB,KAAD,QAAWA,CAAAA,KAAK,CAACD,KAAN,CAAYA,KAAvB,EAAD,CAAzB,CACA,GAAME,CAAAA,YAAY,CAAG1B,WAAW,CAAC,SAACyB,KAAD,QAAWA,CAAAA,KAAK,CAACD,KAAN,CAAYE,YAAvB,EAAD,CAAhC,CACA,GAAMC,CAAAA,QAAQ,CAAG1B,WAAW,EAA5B,CAEA,GAAM2B,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC3BA,KAAK,CAACC,OAAN,GACA,GAAMC,CAAAA,KAAK,CAAGF,KAAK,CAACG,aAAN,CAAoBC,OAApB,CAA4BF,KAA1C,CACA,GAAMG,CAAAA,YAAY,CAAGV,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,QAC3BA,CAAAA,IAAI,CAACC,GAAL,GAAaN,KAAb,kBACWK,IADX,EACiBE,QAAQ,CAAE,IAD3B,oBAEWF,IAFX,EAEiBE,QAAQ,CAAE,KAF3B,EAD2B,EAAV,CAArB,CAKAX,QAAQ,CAACvB,UAAU,CAAC8B,YAAD,CAAX,CAAR,CACAP,QAAQ,CAACzB,eAAe,CAAC6B,KAAD,CAAQP,KAAR,CAAhB,CAAR,CACH,CAVD,CAYA,GAAMe,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAClB,GAAMC,CAAAA,MAAM,CAAGhB,KAAK,CAAC,CAAD,CAAL,CAASgB,MAAxB,CACAjC,KAAK,CACAkC,IADL,CACU,UADV,CACsB,CACdD,MAAM,CAAEA,MADM,CADtB,EAIKE,IAJL,CAIU,SAACC,GAAD,CAAS,CACXC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACH,CANL,EAOAhB,QAAQ,CAACxB,aAAa,CAACqC,MAAD,CAAd,CAAR,CACH,CAVD,CAYA,GAAMM,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB,GAAItC,CAAC,CAACuC,OAAF,CAAUrB,YAAV,CAAJ,CAA6B,CACzBsB,MAAM,CAACC,KAAP,CAAa,kBAAb,EACH,CAFD,IAEO,CACHD,MAAM,CAACC,KAAP,CAAa,oDAAb,EACA1C,KAAK,CACAkC,IADL,CACU,aADV,CACyB,CACjBS,EAAE,CAAExB,YAAY,CAACW,GADA,CADzB,EAIKK,IAJL,CAIU,SAACC,GAAD,CAAS,CACXC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACH,CANL,EAQA,GAAMT,CAAAA,YAAY,CAAGV,KAAK,CAAC2B,MAAN,CACjB,SAACf,IAAD,QAAU,EAAEA,IAAI,CAACC,GAAL,GAAaX,YAAY,CAACW,GAA5B,CAAV,EADiB,CAArB,CAGAV,QAAQ,CAACrB,mBAAmB,CAAC4B,YAAD,CAApB,CAAR,CACAP,QAAQ,CAACtB,kBAAkB,EAAnB,CAAR,CACH,CACJ,CAnBD,CAqBA,GAAM+C,CAAAA,WAAW,CAAG1C,QAAQ,CAAC,SAACqB,KAAD,CAAW,CACpC,GAAIA,KAAK,GAAK,EAAd,CAAkB,CACd,GAAMsB,CAAAA,aAAa,CAAG7B,KAAK,CAAC2B,MAAN,CAAa,SAACf,IAAD,QAC/BA,CAAAA,IAAI,CAACkB,OAAL,CAAaC,QAAb,CAAsBxB,KAAtB,CAD+B,EAAb,CAAtB,CAGA,GAAMG,CAAAA,YAAY,CAAGV,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,CAAU,CACrC,GAAIiB,aAAa,CAACG,IAAd,CAAmB,SAACC,EAAD,QAAQA,CAAAA,EAAE,CAACpB,GAAH,GAAWD,IAAI,CAACC,GAAxB,EAAnB,CAAJ,CAAqD,CACjD,wBAAYD,IAAZ,EAAkBsB,QAAQ,CAAE,IAA5B,GACH,CACD,wBAAYtB,IAAZ,EAAkBsB,QAAQ,CAAE,KAA5B,GACH,CALoB,CAArB,CAMA/B,QAAQ,CAACvB,UAAU,CAAC8B,YAAD,CAAX,CAAR,CACH,CAXD,IAWO,CACH,GAAMA,CAAAA,aAAY,CAAGV,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,CAAU,CACrC,wBAAYA,IAAZ,EAAkBsB,QAAQ,CAAE,KAA5B,GACH,CAFoB,CAArB,CAGA/B,QAAQ,CAACvB,UAAU,CAAC8B,aAAD,CAAX,CAAR,CACH,CACJ,CAlB2B,CAkBzB,IAlByB,CAA5B,CAoBA,mBACI,4CACI,oBAAC,IAAD,mBACI,4BACI,UAAU,KADd,CAEI,YAAY,CAAC,KAFjB,CAGI,SAAS,CAAEX,OAAO,CAACoC,UAHvB,eAKI,oBAAC,SAAD,EACI,KAAK,CAAC,cADV,CAEI,UAAU,CAAE,CACRC,cAAc,cACV,oBAAC,cAAD,EAAgB,QAAQ,CAAC,OAAzB,eACI,oBAAC,UAAD,MADJ,CAFI,CAFhB,CASI,QAAQ,CAAE,kBAACC,CAAD,QAAOT,CAAAA,WAAW,CAACS,CAAC,CAACC,MAAF,CAAS/B,KAAV,CAAlB,EATd,EALJ,CADJ,CAkBKP,KAAK,CAACuC,MAAN,CAAe,CAAf,CACGvC,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,CAAU,CAChB,GAAI4B,CAAAA,aAAa,CAAGvD,UAAU,CAAC,CAC3BwD,mBAAmB,CAAE7B,IAAI,CAACE,QADC,CAE3B4B,cAAc,CAAE,CAAC9B,IAAI,CAACE,QAFK,CAG3B6B,sBAAsB,CAAE/B,IAAI,CAACsB,QAHF,CAAD,CAA9B,CAKA,mBACI,oBAAC,QAAD,EACI,MAAM,KADV,CAEI,OAAO,CAAE9B,WAFb,CAGI,aAAYQ,IAAI,CAACC,GAHrB,CAII,SAAS,CAAEd,OAAO,CAACa,IAJvB,CAKI,GAAG,CAAEA,IAAI,CAACC,GALd,eAOI,oBAAC,YAAD,EACI,OAAO,CAAED,IAAI,CAACgC,KADlB,CAEI,SAAS,CAAEJ,aAFf,EAPJ,CADJ,CAcH,CApBD,CADH,cAuBG,oBAAC,UAAD,EACI,OAAO,CAAC,OADZ,CAEI,OAAO,CAAC,OAFZ,CAGI,SAAS,CAAEzC,OAAO,CAAC8C,OAHvB,aAzCR,cAiDI,oBAAC,UAAD,EAAY,OAAO,CAAE9B,OAArB,CAA8B,SAAS,CAAEhB,OAAO,CAAC+C,aAAjD,eACI,oBAAC,aAAD,EAAe,SAAS,CAAE/C,OAAO,CAACgB,OAAlC,EADJ,CAjDJ,cAoDI,oBAAC,UAAD,EAAY,OAAO,CAAC,OAApB,CAA4B,OAAO,CAAC,QAApC,aApDJ,cAuDI,8BAvDJ,cAwDI,oBAAC,UAAD,EACI,IAAI,CAAC,KADT,CAEI,SAAS,CAAEhB,OAAO,CAACgD,eAFvB,CAGI,OAAO,CAAEzB,UAHb,eAKI,oBAAC,UAAD,EAAY,SAAS,CAAEvB,OAAO,CAACiD,YAA/B,EALJ,CAxDJ,cA+DI,oBAAC,UAAD,EACI,OAAO,CAAC,QADZ,CAEI,OAAO,CAAC,QAFZ,CAGI,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAT,CAAiBC,UAAU,CAAE,MAA7B,CAHX,gBA/DJ,CADJ,CADJ,CA2EH,CAnJD,CAqJA,cAAepD,CAAAA,KAAf","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    getSelectedNote,\n    notesInFolder,\n    selectNote,\n    deleteSelectedNote,\n    updateNotesInFolder,\n} from '../actions/noteActions';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport { debounce } from '../utils/helpers';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from '../CSS/noteStyles';\nimport '../CSS/noteStyles.css';\n\nconst Notes = () => {\n    const classes = useStyles();\n\n    const notes = useSelector((state) => state.notes.notes);\n    const selectedNote = useSelector((state) => state.notes.selectedNote);\n    const dispatch = useDispatch();\n\n    const displayNote = (event) => {\n        event.persist();\n        const value = event.currentTarget.dataset.value;\n        const updatedNotes = notes.map((note) =>\n            note._id === value\n                ? { ...note, selected: true }\n                : { ...note, selected: false }\n        );\n        dispatch(selectNote(updatedNotes));\n        dispatch(getSelectedNote(value, notes));\n    };\n\n    const addNote = () => {\n        const folder = notes[0].folder;\n        axios\n            .post('/addNote', {\n                folder: folder,\n            })\n            .then((res) => {\n                console.log(res);\n            });\n        dispatch(notesInFolder(folder));\n    };\n\n    const deleteNote = () => {\n        if (_.isEmpty(selectedNote)) {\n            window.alert('No note selected');\n        } else {\n            window.alert('Are you sure you want to delete the selected note?');\n            axios\n                .post('/deleteNote', {\n                    id: selectedNote._id,\n                })\n                .then((res) => {\n                    console.log(res);\n                });\n\n            const updatedNotes = notes.filter(\n                (note) => !(note._id === selectedNote._id)\n            );\n            dispatch(updateNotesInFolder(updatedNotes));\n            dispatch(deleteSelectedNote());\n        }\n    };\n\n    const searchNotes = debounce((value) => {\n        if (value !== '') {\n            const filteredNotes = notes.filter((note) =>\n                note.content.includes(value)\n            );\n            const updatedNotes = notes.map((note) => {\n                if (filteredNotes.some((el) => el._id === note._id)) {\n                    return { ...note, filtered: true };\n                }\n                return { ...note, filtered: false };\n            });\n            dispatch(selectNote(updatedNotes));\n        } else {\n            const updatedNotes = notes.map((note) => {\n                return { ...note, filtered: false };\n            });\n            dispatch(selectNote(updatedNotes))\n        }\n    }, 1000);\n\n    return (\n        <div>\n            <List>\n                <form\n                    noValidate\n                    autoComplete=\"off\"\n                    className={classes.searchNote}\n                >\n                    <TextField\n                        label=\"Search Notes\"\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onChange={(e) => searchNotes(e.target.value)}\n                    />\n                </form>\n                {notes.length > 0 ? (\n                    notes.map((note) => {\n                        let listItemClass = classNames({\n                            noteBtnTextSelected: note.selected,\n                            noteBtnTextReg: !note.selected,\n                            noteBtnTextHighlighted: note.filtered,\n                        });\n                        return (\n                            <ListItem\n                                button\n                                onClick={displayNote}\n                                data-value={note._id}\n                                className={classes.note}\n                                key={note._id}\n                            >\n                                <ListItemText\n                                    primary={note.title}\n                                    className={listItemClass}\n                                />\n                            </ListItem>\n                        );\n                    })\n                ) : (\n                    <Typography\n                        variant=\"body1\"\n                        display=\"block\"\n                        className={classes.noNotes}\n                    >\n                        No Notes\n                    </Typography>\n                )}\n                <IconButton onClick={addNote} className={classes.addNoteButton}>\n                    <AddCircleIcon className={classes.addNote} />\n                </IconButton>\n                <Typography variant=\"body1\" display=\"inline\">\n                    Add Note\n                </Typography>\n                <br />\n                <IconButton\n                    edge=\"end\"\n                    className={classes.deleteFolderBtn}\n                    onClick={deleteNote}\n                >\n                    <DeleteIcon className={classes.deleteFolder} />\n                </IconButton>\n                <Typography\n                    display=\"inline\"\n                    variant=\"button\"\n                    style={{ color: '#000', marginLeft: '19px' }}\n                >\n                    Delete Note\n                </Typography>\n            </List>\n        </div>\n    );\n};\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}