{"ast":null,"code":"var _jsxFileName = \"/Users/justinlong/Documents/react/code-note2/frontend/src/components/Folders.js\";\nimport React, { useState, useEffect } from 'react'; // Material-ui\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport useStyles from '../CSS/folderStyles';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notesInFolder, deleteNotesInFolder } from '../actions/noteActions';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst Folders = () => {\n  const classes = useStyles();\n  const [rendered, setRendered] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [modalStyle] = useState(getModalStyle);\n  const [folders, setFolders] = useState([]);\n  const [folderName, setfolderName] = useState('');\n  const notes = useSelector(state => state.notes.notes);\n  const dispatch = useDispatch();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    axios.post('/addFolder', {\n      folder: folderName\n    });\n  };\n\n  const handleChange = event => {\n    setfolderName(event.target.value);\n  };\n\n  const getNotes = event => {\n    event.persist();\n    const value = event.currentTarget.dataset.value;\n    const newFolders = folders.map(folder => folder.folder === value ? { ...folder,\n      selected: true\n    } : { ...folder,\n      selected: false\n    });\n    setFolders(newFolders);\n    dispatch(notesInFolder(value));\n  };\n\n  const deleteFolder = () => {\n    if (notes.length === 0) {\n      window.alert('No folder selected');\n    } else {\n      window.alert('Are you sure you want to delete the folder: ', notes[0].folder);\n      dispatch();\n      axios.post('/deleteFolder', {\n        folder: notes[0].folder\n      });\n    }\n  };\n\n  useEffect(() => {\n    axios.get('/folders').then(res => {\n      return res.data;\n    }).then(res => {\n      const folderObject = res.folders.map(folder => {\n        return {\n          folder: folder,\n          selected: false\n        };\n      });\n      setFolders(folderObject);\n    });\n  }, []);\n  const modalBody = /*#__PURE__*/React.createElement(\"div\", {\n    style: modalStyle,\n    className: classes.modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-basic\",\n    label: \"Folder Name\",\n    variant: \"outlined\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    style: {\n      marginTop: '0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, folders.map(folderObj => {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      onClick: getNotes,\n      \"data-value\": folderObj.folder,\n      className: classes.folderButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FolderIcon, {\n      style: {\n        color: '#0166FF'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: /*#__PURE__*/React.createElement(Typography, {\n        variant: \"h6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 37\n        }\n      }, folderObj.folder),\n      value: folderObj.folder,\n      className: folderObj.selected ? classes.folderBtnTextSelected : classes.folderBtnTextReg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 29\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AddCircleIcon, {\n    className: classes.addFolder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    display: \"inline\",\n    variant: \"button\",\n    style: {\n      color: '#fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, \"Add Folder\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"end\",\n    \"aria-label\": \"delete\",\n    onClick: deleteFolder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    className: classes.deleteFolder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    display: \"inline\",\n    variant: \"button\",\n    style: {\n      color: '#fff',\n      marginLeft: '19px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, \"Delete Folder\")), /*#__PURE__*/React.createElement(Modal, {\n    open: open,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, modalBody));\n};\n\nexport default Folders;","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/components/Folders.js"],"names":["React","useState","useEffect","List","ListItem","ListItemIcon","ListItemText","FolderIcon","IconButton","Modal","TextField","DeleteIcon","Typography","AddCircleIcon","useStyles","axios","useSelector","useDispatch","notesInFolder","deleteNotesInFolder","rand","Math","round","random","getModalStyle","top","left","transform","Folders","classes","rendered","setRendered","open","setOpen","modalStyle","folders","setFolders","folderName","setfolderName","notes","state","dispatch","handleOpen","handleClose","handleSubmit","event","preventDefault","post","folder","handleChange","target","value","getNotes","persist","currentTarget","dataset","newFolders","map","selected","deleteFolder","length","window","alert","get","then","res","data","folderObject","modalBody","modal","form","marginTop","folderObj","folderButton","color","folderBtnTextSelected","folderBtnTextReg","addFolder","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Material-ui\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport useStyles from '../CSS/folderStyles';\n\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notesInFolder, deleteNotesInFolder } from '../actions/noteActions';\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst Folders = () => {\n    const classes = useStyles();\n\n    const [rendered, setRendered] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [modalStyle] = useState(getModalStyle);\n    const [folders, setFolders] = useState([]);\n    const [folderName, setfolderName] = useState('');\n\n    const notes = useSelector((state) => state.notes.notes);\n    const dispatch = useDispatch();\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        axios.post('/addFolder', {\n            folder: folderName,\n        });\n    };\n\n    const handleChange = (event) => {\n        setfolderName(event.target.value);\n    };\n\n    const getNotes = (event) => {\n        event.persist();\n        const value = event.currentTarget.dataset.value;\n        const newFolders = folders.map((folder) =>\n            folder.folder === value\n                ? { ...folder, selected: true }\n                : { ...folder, selected: false }\n        );\n        setFolders(newFolders);\n        dispatch(notesInFolder(value));\n    };\n\n    const deleteFolder = () => {\n        if (notes.length === 0) {\n            window.alert('No folder selected');\n        } else {\n            window.alert(\n                'Are you sure you want to delete the folder: ',\n                notes[0].folder\n            );\n            dispatch()\n            axios.post('/deleteFolder', { folder: notes[0].folder });\n        }\n    };\n\n    useEffect(() => {\n        axios\n            .get('/folders')\n            .then((res) => {\n                return res.data;\n            })\n            .then((res) => {\n                const folderObject = res.folders.map((folder) => {\n                    return { folder: folder, selected: false };\n                });\n                setFolders(folderObject);\n            });\n    }, []);\n\n    const modalBody = (\n        <div style={modalStyle} className={classes.modal}>\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Folder Name\"\n                    variant=\"outlined\"\n                    onChange={handleChange}\n                />\n                <button type=\"submit\" className={classes.form}>\n                    Submit\n                </button>\n            </form>\n        </div>\n    );\n\n    return (\n        <div>\n            <List style={{ marginTop: '0px' }}>\n                {folders.map((folderObj) => {\n                    return (\n                        <ListItem\n                            button\n                            onClick={getNotes}\n                            data-value={folderObj.folder}\n                            className={classes.folderButton}\n                        >\n                            <ListItemIcon>\n                                <FolderIcon style={{ color: '#0166FF' }} />\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={\n                                    <Typography variant=\"h6\">\n                                        {folderObj.folder}\n                                    </Typography>\n                                }\n                                value={folderObj.folder}\n                                className={\n                                    folderObj.selected\n                                        ? classes.folderBtnTextSelected\n                                        : classes.folderBtnTextReg\n                                }\n                            />\n                        </ListItem>\n                    );\n                })}\n                <IconButton onClick={handleOpen}>\n                    <AddCircleIcon className={classes.addFolder} />\n                </IconButton>\n                <Typography\n                    display=\"inline\"\n                    variant=\"button\"\n                    style={{ color: '#fff' }}\n                >\n                    Add Folder\n                </Typography>\n                <br />\n                <IconButton edge=\"end\" aria-label=\"delete\" onClick={deleteFolder}>\n                    <DeleteIcon\n                        className={classes.deleteFolder}\n                    />\n                </IconButton>\n                <Typography\n                    display=\"inline\"\n                    variant=\"button\"\n                    style={{ color: '#fff', marginLeft: '19px' }}\n                >\n                    Delete Folder\n                </Typography>\n            </List>\n            <Modal open={open} onClose={handleClose}>\n                {modalBody}\n            </Modal>\n        </div>\n    );\n};\n\nexport default Folders;\n"]},"metadata":{},"sourceType":"module"}