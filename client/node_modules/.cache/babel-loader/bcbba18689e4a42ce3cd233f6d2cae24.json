{"ast":null,"code":"var _jsxFileName = \"/Users/justinlong/Documents/react/code-note2/frontend/src/components/Notes.js\";\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSelectedNote, notesInFolder } from '../actions/noteActions';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\nconst useStyles = makeStyles(theme => ({\n  addNote: {\n    color: '#000',\n    textAlign: 'center',\n    backgroundColor: '#fff'\n  }\n}));\n\nconst Notes = () => {\n  const classes = useStyles();\n  const notes = useSelector(state => state.notes.notes);\n  const dispatch = useDispatch();\n\n  const displayNote = event => {\n    event.persist();\n    dispatch(getSelectedNote(event.currentTarget.dataset.value, notes));\n  };\n\n  const addNote = () => {\n    const folder = notes[0].folder;\n    axios.post('/addNote', {\n      folder: folder\n    }).then(res => {\n      console.log(res);\n    });\n    dispatch(notesInFolder(folder));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-helperText\",\n    label: \"Search Notes\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 37\n        }\n      }, \"Kg\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  })), notes.length > 0 ? notes.map(note => {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      onClick: displayNote,\n      \"data-value\": note._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: note.title,\n      style: {\n        color: '#000'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 33\n      }\n    }));\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, \"No notes\")));\n};\n\nexport default Notes;","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/components/Notes.js"],"names":["React","useSelector","useDispatch","getSelectedNote","notesInFolder","axios","makeStyles","List","ListItem","ListItemText","TextField","InputAdornment","SearchIcon","useStyles","theme","addNote","color","textAlign","backgroundColor","Notes","classes","notes","state","dispatch","displayNote","event","persist","currentTarget","dataset","value","folder","post","then","res","console","log","startAdornment","length","map","note","_id","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getSelectedNote, notesInFolder } from '../actions/noteActions';\nimport axios from 'axios';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles((theme) => ({\n    addNote: {\n        color: '#000',\n        textAlign: 'center',\n        backgroundColor: '#fff',\n    },\n}));\n\nconst Notes = () => {\n    const classes = useStyles();\n\n    const notes = useSelector((state) => state.notes.notes);\n    const dispatch = useDispatch();\n\n    const displayNote = (event) => {\n        event.persist();\n        dispatch(getSelectedNote(event.currentTarget.dataset.value, notes));\n    };\n\n    const addNote = () => {\n        const folder = notes[0].folder;\n        axios\n            .post('/addNote', {\n                folder: folder,\n            })\n            .then((res) => {\n                console.log(res);\n            });\n        dispatch(notesInFolder(folder));\n    };\n\n    return (\n        <div>\n            <List>\n                {/* <ListItem button className={classes.addNote}>\n                    <ListItemText\n                        primary=\"Add Note\"\n                        onClick={addNote}\n                    />\n                </ListItem> */}\n                <form noValidate autoComplete=\"off \">\n                    <TextField id=\"standard-helperText\" label=\"Search Notes\" InputProps={{\n                    startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>}}/>\n                </form>\n                {notes.length > 0 ? (\n                    notes.map((note) => {\n                        return (\n                            <ListItem\n                                button\n                                onClick={displayNote}\n                                data-value={note._id}\n                            >\n                                <ListItemText\n                                    primary={note.title}\n                                    style={{ color: '#000' }}\n                                />\n                            </ListItem>\n                        );\n                    })\n                ) : (\n                    <p>No notes</p>\n                )}\n            </List>\n        </div>\n    );\n};\n\nexport default Notes;\n"]},"metadata":{},"sourceType":"module"}