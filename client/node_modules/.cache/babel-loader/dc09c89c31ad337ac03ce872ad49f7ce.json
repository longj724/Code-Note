{"ast":null,"code":"var _jsxFileName = \"/Users/justinlong/Documents/react/code-note2/frontend/src/components/TextEditor.js\";\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/mode/python';\nimport 'brace/mode/html';\nimport 'brace/mode/mysql';\nimport 'brace/theme/monokai';\nimport isHotkey from 'is-hotkey';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport { debounce } from '../utils/helpers'; // Slate\n\nimport { Editable, withReact, Slate } from 'slate-react';\nimport { Editor, createEditor, Transforms } from 'slate'; // Material UI\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlineIcon from '@material-ui/icons/FormatUnderlined';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useStyles from '../CSS/textEditorStyles';\nimport { setCurEditorValue } from '../actions/noteActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography } from '@material-ui/core';\n\nconst TextEditor = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selectedNote = useSelector(state => state.notes.selectedNote);\n  const noteJSON = useSelector(state => state.notes.curEditorJSON);\n  const [language, setLanguage] = useState('javascript');\n  const [open, setOpen] = useState(false);\n  const [bold, setBold] = useState(false);\n  const [underline, setUnderline] = useState(false);\n  const [italic, setItalic] = useState(false);\n  const [noteTitle, setNoteTitle] = useState(selectedNote.title);\n  const [updateTitleCheck, setUpdateTitleCheck] = useState(false);\n  const [saveCheck, setSaveCheck] = useState(false);\n  const [tempValue, setTempValue] = useState(noNoteText);\n  const [redirectToHome, setRedirectToHome] = useState(false);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const renderLeaf = useCallback(props => /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 47\n    }\n  })), []);\n  const renderElement = useCallback(props => /*#__PURE__*/React.createElement(Element, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 50\n    }\n  })), []);\n  useEffect(() => {\n    if (!_.isEmpty(selectedNote)) {\n      dispatch(setCurEditorValue(JSON.parse(selectedNote.content)));\n    }\n\n    setBold(false);\n    setUnderline(false);\n    setItalic(false);\n    setNoteTitle(selectedNote.title);\n  }, [selectedNote]);\n\n  const handleChange = event => {\n    setLanguage(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleTitleChange = event => {\n    setNoteTitle(event.target.value);\n    debounce(() => {\n      axios.post('/updateNote', {\n        id: selectedNote._id,\n        content: selectedNote.content,\n        title: noteTitle\n      }).then(res => {\n        console.log(res);\n      });\n    }, 1000);\n    setUpdateTitleCheck(false);\n  };\n\n  const updateTitle = debounce(value => {\n    axios.post('/updateNote', {\n      id: selectedNote._id,\n      content: selectedNote.content,\n      title: value\n    }).then(res => {\n      console.log(res);\n    });\n    setUpdateTitleCheck(false);\n  }, 3000);\n\n  const logout = () => {\n    axios.get('/logout').then(res => res.data).then(data => {\n      if (data.logout) {\n        setRedirectToHome(true);\n      }\n    });\n  };\n\n  const Element = props => {\n    const {\n      attributes,\n      children,\n      element\n    } = props;\n\n    switch (element.type) {\n      case 'code':\n        return /*#__PURE__*/React.createElement(AceElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 24\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(\"p\", Object.assign({\n          style: {\n            fontSize: '16px'\n          }\n        }, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }\n        }), children);\n    }\n  };\n\n  const AceElement = ({\n    attributes,\n    children,\n    element\n  }) => {\n    const noteJSON2 = useSelector(state => state.notes.curEditorJSON);\n    var updatedCode = [];\n\n    const onClick = () => {\n      Editor.insertNode(editor, {\n        children: [{\n          text: ''\n        }]\n      });\n    };\n\n    var handleCodeChange = debounce((newValue, editorId) => {\n      updatedCode = noteJSON2.map(node => {\n        return node.editorId === editorId ? { ...node,\n          editorValue: newValue\n        } : { ...node\n        };\n      });\n      dispatch(setCurEditorValue(updatedCode));\n    }, 3000);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      contentEditable: false,\n      style: {\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AceEditor, {\n      height: \"250px\",\n      width: \"600px\",\n      mode: element.language,\n      theme: \"monokai\",\n      value: element.editorValue,\n      onChange: newValue => handleCodeChange(newValue, element.editorId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", Object.assign({}, attributes, {\n      style: {\n        marginLeft: '10px',\n        marginRight: '10px'\n      },\n      onClick: onClick,\n      contentEditable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }), children));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: '#fff',\n      minHeight: '50vh',\n      width: '50vw'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, ' ', redirectToHome ? /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: _.isEmpty(selectedNote) ? tempValue : noteJSON,\n    onChange: newValue => {\n      if (_.isEmpty(selectedNote)) {\n        setTempValue(newValue);\n      } else {\n        dispatch(setCurEditorValue(newValue));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    onMouseDown: event => {\n      event.preventDefault();\n      setBold(!bold);\n      toggleMark(editor, 'bold');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormatBoldIcon, {\n    className: bold ? classes.marksSelected : classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    onMouseDown: event => {\n      event.preventDefault();\n      setUnderline(!underline);\n      toggleMark(editor, 'underline');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormatUnderlineIcon, {\n    className: underline ? classes.marksSelected : classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    onMouseDown: event => {\n      event.preventDefault();\n      setItalic(!italic);\n      toggleMark(editor, 'italic');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(FormatItalicIcon, {\n    className: italic ? classes.marksSelected : classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.editorLangForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 33\n    }\n  }, \"Language\"), /*#__PURE__*/React.createElement(Select, {\n    value: language,\n    onChange: handleChange,\n    onClose: handleClose,\n    onOpen: handleOpen,\n    labelId: \"demo-controlled-open-select-label\",\n    id: \"demo-controlled-open-select\",\n    style: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 37\n    }\n  }, \"Javascript\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 37\n    }\n  }, \"HTML\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"python\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 37\n    }\n  }, \"Python\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"mysql\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: event => {\n      event.preventDefault();\n      toggleBlock(editor, 'code', language);\n    },\n    className: classes.addEditor,\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    className: classes.addEditorTxt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 33\n    }\n  }, \"Add Editor\")), /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-basic\",\n    label: \"Title\",\n    defaultValue: noteTitle,\n    style: {\n      marginRight: '10px'\n    },\n    onChange: e => {\n      setUpdateTitleCheck(true);\n      updateTitle(e.target.value);\n    },\n    className: classes.editorLangForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(CircularProgress, {\n    className: updateTitleCheck ? classes.updatingTitle : classes.notUpdatingTitle,\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    style: {\n      marginLeft: '1vw'\n    },\n    onClick: () => {\n      if (_.isEmpty(selectedNote)) {\n        return;\n      }\n\n      setSaveCheck(true);\n      axios.post('/updateNote', {\n        id: selectedNote._id,\n        content: JSON.stringify(noteJSON),\n        title: selectedNote.title\n      }).then(res => {\n        console.log(res);\n      });\n      setTimeout(() => {\n        setSaveCheck(false);\n      }, 1000);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(SaveIcon, {\n    className: classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(CircularProgress, {\n    className: saveCheck ? classes.saving : classes.notSaving,\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => logout(),\n    className: classes.markButtons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ExitToAppIcon, {\n    className: classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 33\n    }\n  })))), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (isHotkey('mod+s', event)) {\n        event.preventDefault();\n        setSaveCheck(true);\n        axios.post('/updateNote', {\n          id: selectedNote._id,\n          content: JSON.stringify(noteJSON)\n        }).then(res => {\n          console.log(res);\n        });\n        setTimeout(() => {\n          setSaveCheck(false);\n        }, 1000);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 21\n    }\n  })));\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst toggleBlock = (editor, format, language) => {\n  const isActive = isBlockActive(editor, format);\n  const editorId = Math.floor(Math.random() * 1000 + 1);\n  Transforms.setNodes(editor, {\n    type: isActive ? 'default' : 'code',\n    language,\n    editorValue: 'starter',\n    editorId\n  });\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 12\n    }\n  }), children);\n};\n\nconst noNoteText = [{\n  children: [{\n    text: 'No note selected - Changes will not be saved'\n  }]\n}];\nexport default TextEditor;","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/components/TextEditor.js"],"names":["React","useState","useMemo","useCallback","useEffect","Redirect","AceEditor","isHotkey","_","axios","debounce","Editable","withReact","Slate","Editor","createEditor","Transforms","AppBar","Toolbar","Button","IconButton","FormatBoldIcon","FormatItalicIcon","FormatUnderlineIcon","ExitToAppIcon","SaveIcon","InputLabel","MenuItem","FormControl","Select","TextField","CircularProgress","useStyles","setCurEditorValue","useSelector","useDispatch","Typography","TextEditor","classes","dispatch","selectedNote","state","notes","noteJSON","curEditorJSON","language","setLanguage","open","setOpen","bold","setBold","underline","setUnderline","italic","setItalic","noteTitle","setNoteTitle","title","updateTitleCheck","setUpdateTitleCheck","saveCheck","setSaveCheck","tempValue","setTempValue","noNoteText","redirectToHome","setRedirectToHome","editor","renderLeaf","props","renderElement","isEmpty","JSON","parse","content","handleChange","event","target","value","handleClose","handleOpen","handleTitleChange","post","id","_id","then","res","console","log","updateTitle","logout","get","data","Element","attributes","children","element","type","fontSize","AceElement","noteJSON2","updatedCode","onClick","insertNode","text","handleCodeChange","newValue","editorId","map","node","editorValue","marginLeft","marginRight","backgroundColor","minHeight","width","markButtons","preventDefault","toggleMark","marksSelected","marks","editorLangForm","toggleBlock","addEditor","addEditorTxt","e","updatingTitle","notUpdatingTitle","stringify","setTimeout","saving","notSaving","format","isActive","isMarkActive","removeMark","addMark","isBlockActive","Math","floor","random","setNodes","match","nodes","n","Leaf","leaf"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/mode/python';\nimport 'brace/mode/html';\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai';\nimport isHotkey from 'is-hotkey';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport { debounce } from '../utils/helpers';\n\n// Slate\nimport { Editable, withReact, Slate } from 'slate-react';\nimport { Editor, createEditor, Transforms } from 'slate';\n\n// Material UI\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlineIcon from '@material-ui/icons/FormatUnderlined';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useStyles from '../CSS/textEditorStyles';\n\nimport { setCurEditorValue } from '../actions/noteActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography } from '@material-ui/core';\n\nconst TextEditor = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const selectedNote = useSelector((state) => state.notes.selectedNote);\n    const noteJSON = useSelector((state) => state.notes.curEditorJSON);\n\n    const [language, setLanguage] = useState('javascript');\n    const [open, setOpen] = useState(false);\n    const [bold, setBold] = useState(false);\n    const [underline, setUnderline] = useState(false);\n    const [italic, setItalic] = useState(false);\n    const [noteTitle, setNoteTitle] = useState(selectedNote.title);\n    const [updateTitleCheck, setUpdateTitleCheck] = useState(false);\n    const [saveCheck, setSaveCheck] = useState(false);\n    const [tempValue, setTempValue] = useState(noNoteText);\n    const [redirectToHome, setRedirectToHome] = useState(false);\n\n    const editor = useMemo(() => withReact(createEditor()), []);\n    const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\n    const renderElement = useCallback((props) => <Element {...props} />, []);\n\n    useEffect(() => {\n        if (!_.isEmpty(selectedNote)) {\n            dispatch(setCurEditorValue(JSON.parse(selectedNote.content)));\n        }\n        setBold(false);\n        setUnderline(false);\n        setItalic(false);\n        setNoteTitle(selectedNote.title);\n    }, [selectedNote]);\n\n    const handleChange = (event) => {\n        setLanguage(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleTitleChange = (event) => {\n        setNoteTitle(event.target.value);\n        debounce(() => {\n            axios\n                .post('/updateNote', {\n                    id: selectedNote._id,\n                    content: selectedNote.content,\n                    title: noteTitle,\n                })\n                .then((res) => {\n                    console.log(res);\n                });\n        }, 1000);\n        setUpdateTitleCheck(false);\n    };\n\n    const updateTitle = debounce((value) => {\n        axios\n            .post('/updateNote', {\n                id: selectedNote._id,\n                content: selectedNote.content,\n                title: value,\n            })\n            .then((res) => {\n                console.log(res);\n            });\n        setUpdateTitleCheck(false);\n    }, 3000);\n\n    const logout = () => {\n        axios\n            .get('/logout')\n            .then((res) => res.data)\n            .then((data) => {\n                if (data.logout) {\n                    setRedirectToHome(true);\n                }\n            });\n    };\n\n    const Element = (props) => {\n        const { attributes, children, element } = props;\n        switch (element.type) {\n            case 'code':\n                return <AceElement {...props} />;\n            default:\n                return (\n                    <p style={{ fontSize: '16px' }} {...attributes}>\n                        {children}\n                    </p>\n                );\n        }\n    };\n\n    const AceElement = ({ attributes, children, element }) => {\n        const noteJSON2 = useSelector((state) => state.notes.curEditorJSON);\n        var updatedCode = [];\n\n        const onClick = () => {\n            Editor.insertNode(editor, {\n                children: [{ text: '' }],\n            });\n        };\n\n        var handleCodeChange = debounce((newValue, editorId) => {\n            updatedCode = noteJSON2.map((node) => {\n                return node.editorId === editorId\n                    ? { ...node, editorValue: newValue }\n                    : { ...node };\n            });\n            dispatch(setCurEditorValue(updatedCode));\n        }, 3000);\n\n        return (\n            <>\n                <div contentEditable={false} style={{ marginLeft: '10px' }}>\n                    <AceEditor\n                        height=\"250px\"\n                        width=\"600px\"\n                        mode={element.language}\n                        theme=\"monokai\"\n                        value={element.editorValue}\n                        onChange={(newValue) =>\n                            handleCodeChange(newValue, element.editorId)\n                        }\n                    />\n                </div>\n                <p\n                    {...attributes}\n                    style={{ marginLeft: '10px', marginRight: '10px' }}\n                    onClick={onClick}\n                    contentEditable={false}\n                >\n                    {children}\n                </p>\n            </>\n        );\n    };\n\n    return (\n        <div\n            style={{\n                backgroundColor: '#fff',\n                minHeight: '50vh',\n                width: '50vw',\n            }}\n        >\n            {' '}\n            {redirectToHome ? (\n                <Redirect to=\"/\" />\n            ) : (\n                <Slate\n                    editor={editor}\n                    value={_.isEmpty(selectedNote) ? tempValue : noteJSON}\n                    onChange={(newValue) => {\n                        if (_.isEmpty(selectedNote)) {\n                            setTempValue(newValue);\n                        } else {\n                            dispatch(setCurEditorValue(newValue));\n                        }\n                    }}\n                >\n                    <AppBar position=\"static\">\n                        <Toolbar>\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                onMouseDown={(event) => {\n                                    event.preventDefault();\n                                    setBold(!bold);\n                                    toggleMark(editor, 'bold');\n                                }}\n                            >\n                                <FormatBoldIcon\n                                    className={\n                                        bold\n                                            ? classes.marksSelected\n                                            : classes.marks\n                                    }\n                                />\n                            </IconButton>\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                onMouseDown={(event) => {\n                                    event.preventDefault();\n                                    setUnderline(!underline);\n                                    toggleMark(editor, 'underline');\n                                }}\n                            >\n                                <FormatUnderlineIcon\n                                    className={\n                                        underline\n                                            ? classes.marksSelected\n                                            : classes.marks\n                                    }\n                                />\n                            </IconButton>\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                onMouseDown={(event) => {\n                                    event.preventDefault();\n                                    setItalic(!italic);\n                                    toggleMark(editor, 'italic');\n                                }}\n                            >\n                                <FormatItalicIcon\n                                    className={\n                                        italic\n                                            ? classes.marksSelected\n                                            : classes.marks\n                                    }\n                                />\n                            </IconButton>\n                            <FormControl className={classes.editorLangForm}>\n                                <InputLabel style={{}}>Language</InputLabel>\n                                <Select\n                                    value={language}\n                                    onChange={handleChange}\n                                    onClose={handleClose}\n                                    onOpen={handleOpen}\n                                    labelId=\"demo-controlled-open-select-label\"\n                                    id=\"demo-controlled-open-select\"\n                                    style={{ marginRight: '10px' }}\n                                >\n                                    <MenuItem value=\"javascript\">\n                                        Javascript\n                                    </MenuItem>\n                                    <MenuItem value=\"html\">HTML</MenuItem>\n                                    <MenuItem value=\"python\">Python</MenuItem>\n                                    <MenuItem value=\"mysql\"></MenuItem>\n                                </Select>\n                            </FormControl>\n                            <Button\n                                variant=\"contained\"\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    toggleBlock(editor, 'code', language);\n                                }}\n                                className={classes.addEditor}\n                                disableElevation\n                            >\n                                <Typography\n                                    variant=\"body2\"\n                                    className={classes.addEditorTxt}\n                                >\n                                    Add Editor\n                                </Typography>\n                            </Button>\n                            <TextField\n                                id=\"standard-basic\"\n                                label=\"Title\"\n                                defaultValue={noteTitle}\n                                style={{ marginRight: '10px' }}\n                                onChange={(e) => {\n                                    setUpdateTitleCheck(true);\n                                    updateTitle(e.target.value);\n                                }}\n                                className={classes.editorLangForm}\n                            />\n                            <CircularProgress\n                                className={\n                                    updateTitleCheck\n                                        ? classes.updatingTitle\n                                        : classes.notUpdatingTitle\n                                }\n                                size={20}\n                            />\n                            <IconButton\n                                edge=\"start\"\n                                className={classes.markButtons}\n                                style={{ marginLeft: '1vw' }}\n                                onClick={() => {\n                                    if (_.isEmpty(selectedNote)) {\n                                        return;\n                                    }\n                                    setSaveCheck(true);\n                                    axios\n                                        .post('/updateNote', {\n                                            id: selectedNote._id,\n                                            content: JSON.stringify(noteJSON),\n                                            title: selectedNote.title,\n                                        })\n                                        .then((res) => {\n                                            console.log(res);\n                                        });\n                                    setTimeout(() => {\n                                        setSaveCheck(false);\n                                    }, 1000);\n                                }}\n                            >\n                                <SaveIcon className={classes.marks} />\n                            </IconButton>\n                            <CircularProgress\n                                className={\n                                    saveCheck\n                                        ? classes.saving\n                                        : classes.notSaving\n                                }\n                                size={20}\n                            />\n                            <IconButton onClick={() => logout()} className={classes.markButtons}>\n                                <ExitToAppIcon className={classes.marks}/>\n                            </IconButton>\n                        </Toolbar>\n                    </AppBar>\n                    <Editable\n                        renderElement={renderElement}\n                        renderLeaf={renderLeaf}\n                        onKeyDown={(event) => {\n                            if (isHotkey('mod+s', event)) {\n                                event.preventDefault();\n                                setSaveCheck(true);\n                                axios\n                                    .post('/updateNote', {\n                                        id: selectedNote._id,\n                                        content: JSON.stringify(noteJSON),\n                                    })\n                                    .then((res) => {\n                                        console.log(res);\n                                    });\n                                setTimeout(() => {\n                                    setSaveCheck(false);\n                                }, 1000);\n                            }\n                        }}\n                    />\n                </Slate>\n            )}\n        </div>\n    );\n};\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format);\n\n    if (isActive) {\n        Editor.removeMark(editor, format);\n    } else {\n        Editor.addMark(editor, format, true);\n    }\n};\n\nconst toggleBlock = (editor, format, language) => {\n    const isActive = isBlockActive(editor, format);\n    const editorId = Math.floor(Math.random() * 1000 + 1);\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'default' : 'code',\n        language,\n        editorValue: 'starter',\n        editorId,\n    });\n};\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor);\n    return marks ? marks[format] === true : false;\n};\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: (n) => n.type === format,\n    });\n\n    return !!match;\n};\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>;\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>;\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>;\n    }\n\n    return <span {...attributes}>{children}</span>;\n};\n\nconst noNoteText = [\n    {\n        children: [\n            {\n                text: 'No note selected - Changes will not be saved',\n            },\n        ],\n    },\n];\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}