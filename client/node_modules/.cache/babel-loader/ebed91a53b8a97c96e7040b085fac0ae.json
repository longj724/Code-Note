{"ast":null,"code":"var _jsxFileName = \"/Users/justinlong/Documents/react/code-note2/frontend/src/components/TextEditor.js\";\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/mode/python';\nimport 'brace/mode/html';\nimport 'brace/theme/monokai';\nimport isHotkey from 'is-hotkey';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport { debounce } from '../utils/helpers'; // Slate\n\nimport { Editable, withReact, Slate } from 'slate-react';\nimport { Editor, createEditor, Transforms } from 'slate'; // Material UI\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlineIcon from '@material-ui/icons/FormatUnderlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport useStyles from '../CSS/textEditorStyles';\nimport { setCurEditorValue, selectNote } from '../actions/noteActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography, Icon } from '@material-ui/core';\n\nconst TextEditor = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selectedNote = useSelector(state => state.notes.selectedNote);\n  const noteJSON = useSelector(state => state.notes.curEditorJSON);\n  const [language, setLanguage] = useState('javascript');\n  const [open, setOpen] = useState(false);\n  const [bold, setBold] = useState(false);\n  const [underline, setUnderline] = useState(false);\n  const [italic, setItalic] = useState(false);\n  const [noteTitle, setNoteTitle] = useState(selectedNote.title);\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const renderLeaf = useCallback(props => /*#__PURE__*/React.createElement(Leaf, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 47\n    }\n  })), []);\n  const renderElement = useCallback(props => /*#__PURE__*/React.createElement(Element, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 50\n    }\n  })), []);\n  useEffect(() => {\n    if (!_.isEmpty(selectedNote)) {\n      dispatch(setCurEditorValue(JSON.parse(selectedNote.content)));\n    }\n\n    setBold(false);\n    setUnderline(false);\n    setItalic(false);\n  }, [selectedNote]);\n\n  const handleChange = event => {\n    setLanguage(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleTitleChange = debounce(event => {\n    console.log(event.currentTarget.value);\n    setNoteTitle(event.target.value);\n  }, 500);\n\n  const updateTitle = () => {\n    axios.post('/updateNote', {\n      id: selectedNote._id,\n      content: selectedNote.content,\n      title: noteTitle\n    }).then(res => {\n      console.log(res);\n    });\n  };\n\n  const Element = props => {\n    const {\n      attributes,\n      children,\n      element\n    } = props;\n\n    switch (element.type) {\n      case 'code':\n        return /*#__PURE__*/React.createElement(AceElement, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 24\n          }\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(\"p\", Object.assign({}, attributes, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 24\n          }\n        }), children);\n    }\n  };\n\n  const AceElement = ({\n    attributes,\n    children,\n    element\n  }) => {\n    const noteJSON2 = useSelector(state => state.notes.curEditorJSON);\n    var updatedCode = [];\n\n    const onClick = () => {\n      Editor.insertNode(editor, {\n        children: [{\n          text: ''\n        }]\n      });\n    };\n\n    var handleCodeChange = debounce((newValue, editorId) => {\n      event.persist;\n      updatedCode = noteJSON2.map(node => {\n        return node.editorId === editorId ? { ...node,\n          editorValue: newValue\n        } : { ...node\n        };\n      });\n      dispatch(setCurEditorValue(updatedCode));\n    }, 3000);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      contentEditable: false,\n      style: {\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AceEditor, {\n      height: \"250px\",\n      mode: element.language,\n      theme: \"monokai\",\n      value: element.editorValue,\n      onChange: newValue => handleCodeChange(newValue, element.editorId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", Object.assign({}, attributes, {\n      style: {\n        marginLeft: '10px',\n        marginRight: '10px'\n      },\n      onClick: onClick,\n      contentEditable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }), children));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: '#fff',\n      minHeight: '50vh',\n      width: '50vw'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Slate, {\n    editor: editor,\n    value: noteJSON,\n    onChange: newValue => dispatch(setCurEditorValue(newValue)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    onMouseDown: event => {\n      event.preventDefault();\n      setBold(!bold);\n      toggleMark(editor, 'bold');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormatBoldIcon, {\n    className: bold ? classes.marksSelected : classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    onMouseDown: event => {\n      event.preventDefault();\n      setUnderline(!underline);\n      toggleMark(editor, 'underline');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormatUnderlineIcon, {\n    className: underline ? classes.marksSelected : classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    onMouseDown: event => {\n      event.preventDefault();\n      setItalic(!italic);\n      toggleMark(editor, 'italic');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormatItalicIcon, {\n    className: italic ? classes.marksSelected : classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FormControl, {\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 29\n    }\n  }, \"Language\"), /*#__PURE__*/React.createElement(Select, {\n    value: language,\n    onChange: handleChange,\n    onClose: handleClose,\n    onOpen: handleOpen,\n    labelId: \"demo-controlled-open-select-label\",\n    id: \"demo-controlled-open-select\",\n    style: {\n      marginRight: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"javascript\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 33\n    }\n  }, \"Javascript\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 33\n    }\n  }, \"HTML\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"python\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 33\n    }\n  }, \"Python\"))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: event => {\n      event.preventDefault();\n      toggleBlock(editor, 'code', language);\n    },\n    className: classes.addEditor,\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"button\",\n    className: classes.addEditorTxt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 29\n    }\n  }, \"Add Editor\")), /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-basic\",\n    label: \"Title\",\n    defaultValue: noteTitle,\n    style: {\n      marginLeft: '20px',\n      marginRight: '10px'\n    },\n    onChange: e => handleTitleChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    className: classes.addEditor,\n    disableElevation: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"button\",\n    className: classes.addEditorTxt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 29\n    }\n  }, \"Update Title\")), /*#__PURE__*/React.createElement(IconButton, {\n    edge: \"start\",\n    className: classes.markButtons,\n    style: {\n      marginLeft: '1vw'\n    },\n    onClick: () => {\n      axios.post('/updateNote', {\n        id: selectedNote._id,\n        content: JSON.stringify(noteJSON),\n        title: selectedNote.title\n      }).then(res => {\n        console.log(res);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(SaveIcon, {\n    className: classes.marks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (isHotkey('mod+s', event)) {\n        event.preventDefault();\n        axios.post('/updateNote', {\n          id: selectedNote._id,\n          content: JSON.stringify(noteJSON)\n        }).then(res => {\n          console.log(res);\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  })));\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst toggleBlock = (editor, format, language) => {\n  const isActive = isBlockActive(editor, format);\n  const editorId = Math.floor(Math.random() * 1000 + 1);\n  Transforms.setNodes(editor, {\n    type: isActive ? 'default' : 'code',\n    language,\n    editorValue: 'starter',\n    editorId\n  });\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = /*#__PURE__*/React.createElement(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 12\n    }\n  }), children);\n};\n\nconst noNoteText = [{\n  children: [{\n    text: 'No note selected - Changes will not be saved'\n  }]\n}];\nexport default TextEditor;","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/components/TextEditor.js"],"names":["React","useState","useMemo","useCallback","useEffect","AceEditor","isHotkey","_","axios","debounce","Editable","withReact","Slate","Editor","createEditor","Transforms","AppBar","Toolbar","Button","IconButton","FormatBoldIcon","FormatItalicIcon","FormatUnderlineIcon","SaveIcon","InputLabel","MenuItem","FormControl","Select","TextField","useStyles","setCurEditorValue","selectNote","useSelector","useDispatch","Typography","Icon","TextEditor","classes","dispatch","selectedNote","state","notes","noteJSON","curEditorJSON","language","setLanguage","open","setOpen","bold","setBold","underline","setUnderline","italic","setItalic","noteTitle","setNoteTitle","title","editor","renderLeaf","props","renderElement","isEmpty","JSON","parse","content","handleChange","event","target","value","handleClose","handleOpen","handleTitleChange","console","log","currentTarget","updateTitle","post","id","_id","then","res","Element","attributes","children","element","type","AceElement","noteJSON2","updatedCode","onClick","insertNode","text","handleCodeChange","newValue","editorId","persist","map","node","editorValue","marginLeft","marginRight","backgroundColor","minHeight","width","markButtons","preventDefault","toggleMark","marksSelected","marks","formControl","toggleBlock","addEditor","addEditorTxt","e","stringify","format","isActive","isMarkActive","removeMark","addMark","isBlockActive","Math","floor","random","setNodes","match","nodes","n","Leaf","leaf","noNoteText"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/mode/python';\nimport 'brace/mode/html';\nimport 'brace/theme/monokai';\nimport isHotkey from 'is-hotkey';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport { debounce } from '../utils/helpers';\n\n// Slate\nimport { Editable, withReact, Slate } from 'slate-react';\nimport { Editor, createEditor, Transforms } from 'slate';\n\n// Material UI\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormatBoldIcon from '@material-ui/icons/FormatBold';\nimport FormatItalicIcon from '@material-ui/icons/FormatItalic';\nimport FormatUnderlineIcon from '@material-ui/icons/FormatUnderlined';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport useStyles from '../CSS/textEditorStyles';\n\nimport { setCurEditorValue, selectNote } from '../actions/noteActions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography, Icon } from '@material-ui/core';\n\nconst TextEditor = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const selectedNote = useSelector((state) => state.notes.selectedNote);\n    const noteJSON = useSelector((state) => state.notes.curEditorJSON);\n\n    const [language, setLanguage] = useState('javascript');\n    const [open, setOpen] = useState(false);\n    const [bold, setBold] = useState(false);\n    const [underline, setUnderline] = useState(false);\n    const [italic, setItalic] = useState(false);\n    const [noteTitle, setNoteTitle] = useState(selectedNote.title);\n\n    const editor = useMemo(() => withReact(createEditor()), []);\n    const renderLeaf = useCallback((props) => <Leaf {...props} />, []);\n    const renderElement = useCallback((props) => <Element {...props} />, []);\n\n    useEffect(() => {\n        if (!_.isEmpty(selectedNote)) {\n            dispatch(setCurEditorValue(JSON.parse(selectedNote.content)));\n        }\n        setBold(false);\n        setUnderline(false);\n        setItalic(false);\n    }, [selectedNote]);\n\n    const handleChange = (event) => {\n        setLanguage(event.target.value);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleTitleChange = debounce((event) => {\n        console.log(event.currentTarget.value)\n        setNoteTitle(event.target.value)\n    }, 500);\n\n    const updateTitle = () => {\n        axios\n            .post('/updateNote', {\n                id: selectedNote._id,\n                content: selectedNote.content,\n                title: noteTitle,\n            })\n            .then((res) => {\n                console.log(res);\n            });\n    };\n\n    const Element = (props) => {\n        const { attributes, children, element } = props;\n        switch (element.type) {\n            case 'code':\n                return <AceElement {...props} />;\n            default:\n                return <p {...attributes}>{children}</p>;\n        }\n    };\n\n    const AceElement = ({ attributes, children, element }) => {\n        const noteJSON2 = useSelector((state) => state.notes.curEditorJSON);\n        var updatedCode = [];\n\n        const onClick = () => {\n            Editor.insertNode(editor, {\n                children: [{ text: '' }],\n            });\n        };\n\n        var handleCodeChange = debounce((newValue, editorId) => {\n            event.persist\n            updatedCode = noteJSON2.map((node) => {\n                return node.editorId === editorId\n                    ? { ...node, editorValue: newValue }\n                    : { ...node };\n            });\n            dispatch(setCurEditorValue(updatedCode));\n        }, 3000);\n\n        return (\n            <>\n                <div contentEditable={false} style={{ marginLeft: '10px' }}>\n                    <AceEditor\n                        height=\"250px\"\n                        mode={element.language}\n                        theme=\"monokai\"\n                        value={element.editorValue}\n                        onChange={(newValue) =>\n                            handleCodeChange(newValue, element.editorId)\n                        }\n                    />\n                </div>\n                <p\n                    {...attributes}\n                    style={{ marginLeft: '10px', marginRight: '10px' }}\n                    onClick={onClick}\n                    contentEditable={false}\n                >\n                    {children}\n                </p>\n            </>\n        );\n    };\n\n    return (\n        <div\n            style={{\n                backgroundColor: '#fff',\n                minHeight: '50vh',\n                width: '50vw',\n            }}\n        >\n            <Slate\n                editor={editor}\n                value={noteJSON}\n                onChange={(newValue) => dispatch(setCurEditorValue(newValue))}\n            >\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.markButtons}\n                            onMouseDown={(event) => {\n                                event.preventDefault();\n                                setBold(!bold);\n                                toggleMark(editor, 'bold');\n                            }}\n                        >\n                            <FormatBoldIcon\n                                className={\n                                    bold ? classes.marksSelected : classes.marks\n                                }\n                            />\n                        </IconButton>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.markButtons}\n                            onMouseDown={(event) => {\n                                event.preventDefault();\n                                setUnderline(!underline);\n                                toggleMark(editor, 'underline');\n                            }}\n                        >\n                            <FormatUnderlineIcon\n                                className={\n                                    underline\n                                        ? classes.marksSelected\n                                        : classes.marks\n                                }\n                            />\n                        </IconButton>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.markButtons}\n                            onMouseDown={(event) => {\n                                event.preventDefault();\n                                setItalic(!italic);\n                                toggleMark(editor, 'italic');\n                            }}\n                        >\n                            <FormatItalicIcon\n                                className={\n                                    italic\n                                        ? classes.marksSelected\n                                        : classes.marks\n                                }\n                            />\n                        </IconButton>\n                        <FormControl className={classes.formControl}>\n                            <InputLabel style={{}}>Language</InputLabel>\n                            <Select\n                                value={language}\n                                onChange={handleChange}\n                                onClose={handleClose}\n                                onOpen={handleOpen}\n                                labelId=\"demo-controlled-open-select-label\"\n                                id=\"demo-controlled-open-select\"\n                                style={{ marginRight: '10px' }}\n                            >\n                                <MenuItem value=\"javascript\">\n                                    Javascript\n                                </MenuItem>\n                                <MenuItem value=\"html\">HTML</MenuItem>\n                                <MenuItem value=\"python\">Python</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <Button\n                            variant=\"contained\"\n                            onClick={(event) => {\n                                event.preventDefault();\n                                toggleBlock(editor, 'code', language);\n                            }}\n                            className={classes.addEditor}\n                            disableElevation\n                        >\n                            <Typography\n                                variant=\"button\"\n                                className={classes.addEditorTxt}\n                            >\n                                Add Editor\n                            </Typography>\n                        </Button>\n                        <TextField\n                            id=\"standard-basic\"\n                            label=\"Title\"\n                            defaultValue={noteTitle}\n                            style={{ marginLeft: '20px', marginRight: '10px' }}\n                            onChange={(e) => handleTitleChange(e)}\n                        />\n                        <Button\n                            variant=\"contained\"\n                            className={classes.addEditor}\n                            disableElevation\n                        >\n                            <Typography\n                                variant=\"button\"\n                                className={classes.addEditorTxt}\n                            >\n                                Update Title\n                            </Typography>\n                        </Button>\n                        <IconButton\n                            edge=\"start\"\n                            className={classes.markButtons}\n                            style={{ marginLeft: '1vw' }}\n                            onClick={() => {\n                                axios\n                                    .post('/updateNote', {\n                                        id: selectedNote._id,\n                                        content: JSON.stringify(noteJSON),\n                                        title: selectedNote.title,\n                                    })\n                                    .then((res) => {\n                                        console.log(res);\n                                    });\n                            }}\n                        >\n                            <SaveIcon className={classes.marks} />\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <Editable\n                    renderElement={renderElement}\n                    renderLeaf={renderLeaf}\n                    onKeyDown={(event) => {\n                        if (isHotkey('mod+s', event)) {\n                            event.preventDefault();\n                            axios\n                                .post('/updateNote', {\n                                    id: selectedNote._id,\n                                    content: JSON.stringify(noteJSON),\n                                })\n                                .then((res) => {\n                                    console.log(res);\n                                });\n                        }\n                    }}\n                />\n            </Slate>\n        </div>\n    );\n};\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format);\n\n    if (isActive) {\n        Editor.removeMark(editor, format);\n    } else {\n        Editor.addMark(editor, format, true);\n    }\n};\n\nconst toggleBlock = (editor, format, language) => {\n    const isActive = isBlockActive(editor, format);\n    const editorId = Math.floor(Math.random() * 1000 + 1);\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'default' : 'code',\n        language,\n        editorValue: 'starter',\n        editorId,\n    });\n};\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor);\n    return marks ? marks[format] === true : false;\n};\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: (n) => n.type === format,\n    });\n\n    return !!match;\n};\n\nconst Leaf = ({ attributes, children, leaf }) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>;\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>;\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>;\n    }\n\n    return <span {...attributes}>{children}</span>;\n};\n\nconst noNoteText = [\n    {\n        children: [\n            {\n                text: 'No note selected - Changes will not be saved',\n            },\n        ],\n    },\n];\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}