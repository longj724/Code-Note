{"ast":null,"code":"import _objectSpread from\"/Users/justinlong/Documents/react/code-note2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{CUR_FOLDER_NOTES,SELECTED_NOTE,CUR_EDITOR_JSON,SELECT_NOTE,DELETE_FOLDER,DELETE_NOTE,UPDATE_NOTES_IN_FOLDER}from'./types';import axios from'axios';export var notesInFolder=function notesInFolder(folder){return function(dispatch){axios.post('/notesInFolder',{folder:folder}).then(function(res){return res.data;}).then(function(notes){var updatedNotes=notes.map(function(n){return _objectSpread({},n,{selected:false});});dispatch({type:CUR_FOLDER_NOTES,payload:updatedNotes});});};};export var getSelectedNote=function getSelectedNote(id,notes){return function(dispatch){var selectedNote=notes.find(function(note){return note._id===id;});dispatch({type:SELECTED_NOTE,payload:selectedNote});};};export var setCurEditorValue=function setCurEditorValue(value){return function(dispatch){dispatch({type:CUR_EDITOR_JSON,payload:value});};};export var selectNote=function selectNote(updatedNotes){return function(dispatch){dispatch({type:SELECT_NOTE,payload:updatedNotes});};};export var deleteNotesInFolder=function deleteNotesInFolder(){return function(dispatch){dispatch({type:DELETE_FOLDER,payload:[]});};};export var deleteSelectedNote=function deleteSelectedNote(){return function(dispatch){dispatch({type:DELETE_NOTE,payload:{}});};};export var updateNotesInFolder=function updateNotesInFolder(updatedNotes){return function(dispatch){dispatch({type:UPDATE_NOTES_IN_FOLDER,payload:updatedNotes});};};","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/actions/noteActions.js"],"names":["CUR_FOLDER_NOTES","SELECTED_NOTE","CUR_EDITOR_JSON","SELECT_NOTE","DELETE_FOLDER","DELETE_NOTE","UPDATE_NOTES_IN_FOLDER","axios","notesInFolder","folder","dispatch","post","then","res","data","notes","updatedNotes","map","n","selected","type","payload","getSelectedNote","id","selectedNote","find","note","_id","setCurEditorValue","value","selectNote","deleteNotesInFolder","deleteSelectedNote","updateNotesInFolder"],"mappings":"2KAAA,OACIA,gBADJ,CAEIC,aAFJ,CAGIC,eAHJ,CAIIC,WAJJ,CAKIC,aALJ,CAMIC,WANJ,CAOIC,sBAPJ,KAQO,SARP,CASA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,MAAD,QAAY,UAACC,QAAD,CAAc,CACnDH,KAAK,CACAI,IADL,CACU,gBADV,CAC4B,CACpBF,MAAM,CAAEA,MADY,CAD5B,EAIKG,IAJL,CAIU,SAACC,GAAD,CAAS,CACX,MAAOA,CAAAA,GAAG,CAACC,IAAX,CACH,CANL,EAOKF,IAPL,CAOU,SAACG,KAAD,CAAW,CACb,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,GAAN,CAAU,SAACC,CAAD,CAAO,CAClC,wBAAYA,CAAZ,EAAeC,QAAQ,CAAE,KAAzB,GACH,CAFoB,CAArB,CAGAT,QAAQ,CAAC,CACLU,IAAI,CAAEpB,gBADD,CAELqB,OAAO,CAAEL,YAFJ,CAAD,CAAR,CAIH,CAfL,EAgBH,CAjB4B,EAAtB,CAmBP,MAAO,IAAMM,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,EAAD,CAAKR,KAAL,QAAe,UAACL,QAAD,CAAc,CACxD,GAAMc,CAAAA,YAAY,CAAGT,KAAK,CAACU,IAAN,CAAW,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaJ,EAAvB,EAAX,CAArB,CACAb,QAAQ,CAAC,CAAEU,IAAI,CAAEnB,aAAR,CAAuBoB,OAAO,CAAEG,YAAhC,CAAD,CAAR,CACH,CAH8B,EAAxB,CAKP,MAAO,IAAMI,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,QAAW,UAACnB,QAAD,CAAc,CACtDA,QAAQ,CAAC,CAAEU,IAAI,CAAElB,eAAR,CAAyBmB,OAAO,CAAEQ,KAAlC,CAAD,CAAR,CACH,CAFgC,EAA1B,CAIP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACd,YAAD,QAAkB,UAACN,QAAD,CAAc,CACtDA,QAAQ,CAAC,CAAEU,IAAI,CAAEjB,WAAR,CAAqBkB,OAAO,CAAEL,YAA9B,CAAD,CAAR,CACH,CAFyB,EAAnB,CAIP,MAAO,IAAMe,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,SAAM,UAACrB,QAAD,CAAc,CACnDA,QAAQ,CAAC,CAAEU,IAAI,CAAEhB,aAAR,CAAuBiB,OAAO,CAAE,EAAhC,CAAD,CAAR,CACH,CAFkC,EAA5B,CAIP,MAAO,IAAMW,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,SAAM,UAACtB,QAAD,CAAc,CAClDA,QAAQ,CAAC,CAAEU,IAAI,CAAEf,WAAR,CAAqBgB,OAAO,CAAE,EAA9B,CAAD,CAAR,CACH,CAFiC,EAA3B,CAIP,MAAO,IAAMY,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACjB,YAAD,QAAkB,UAACN,QAAD,CAAc,CAC/DA,QAAQ,CAAC,CAAEU,IAAI,CAAEd,sBAAR,CAAgCe,OAAO,CAAEL,YAAzC,CAAD,CAAR,CACH,CAFkC,EAA5B","sourcesContent":["import {\n    CUR_FOLDER_NOTES,\n    SELECTED_NOTE,\n    CUR_EDITOR_JSON,\n    SELECT_NOTE,\n    DELETE_FOLDER,\n    DELETE_NOTE,\n    UPDATE_NOTES_IN_FOLDER,\n} from './types';\nimport axios from 'axios';\n\nexport const notesInFolder = (folder) => (dispatch) => {\n    axios\n        .post('/notesInFolder', {\n            folder: folder,\n        })\n        .then((res) => {\n            return res.data;\n        })\n        .then((notes) => {\n            const updatedNotes = notes.map((n) => {\n                return { ...n, selected: false };\n            });\n            dispatch({\n                type: CUR_FOLDER_NOTES,\n                payload: updatedNotes,\n            });\n        });\n};\n\nexport const getSelectedNote = (id, notes) => (dispatch) => {\n    const selectedNote = notes.find((note) => note._id === id);\n    dispatch({ type: SELECTED_NOTE, payload: selectedNote });\n};\n\nexport const setCurEditorValue = (value) => (dispatch) => {\n    dispatch({ type: CUR_EDITOR_JSON, payload: value });\n};\n\nexport const selectNote = (updatedNotes) => (dispatch) => {\n    dispatch({ type: SELECT_NOTE, payload: updatedNotes });\n};\n\nexport const deleteNotesInFolder = () => (dispatch) => {\n    dispatch({ type: DELETE_FOLDER, payload: [] });\n};\n\nexport const deleteSelectedNote = () => (dispatch) => {\n    dispatch({ type: DELETE_NOTE, payload: {} });\n};\n\nexport const updateNotesInFolder = (updatedNotes) => (dispatch) => {\n    dispatch({ type: UPDATE_NOTES_IN_FOLDER, payload: updatedNotes });\n};\n"]},"metadata":{},"sourceType":"module"}