{"ast":null,"code":"import { CUR_FOLDER_NOTES, SELECTED_NOTE, CUR_EDITOR_JSON, SELECT_NOTE, DELETE_FOLDER, DELETE_NOTE, UPDATE_NOTES_IN_FOLDER } from './types';\nimport axios from 'axios';\nexport const notesInFolder = folder => dispatch => {\n  axios.post('/notesInFolder', {\n    folder: folder\n  }).then(res => {\n    return res.data;\n  }).then(notes => {\n    const updatedNotes = notes.map(n => {\n      return { ...n,\n        selected: false\n      };\n    });\n    dispatch({\n      type: CUR_FOLDER_NOTES,\n      payload: updatedNotes\n    });\n  });\n};\nexport const getSelectedNote = (id, notes) => dispatch => {\n  const selectedNote = notes.find(note => note._id === id);\n  dispatch({\n    type: SELECTED_NOTE,\n    payload: selectedNote\n  });\n};\nexport const setCurEditorValue = value => dispatch => {\n  dispatch({\n    type: CUR_EDITOR_JSON,\n    payload: value\n  });\n};\nexport const selectNote = updatedNotes => dispatch => {\n  dispatch({\n    type: SELECT_NOTE,\n    payload: updatedNotes\n  });\n};\nexport const deleteNotesInFolder = () => dispatch => {\n  dispatch({\n    type: DELETE_FOLDER,\n    payload: []\n  });\n};\nexport const deleteSelectedNote = () => dispatch => {\n  dispatch({\n    type: DELETE_NOTE,\n    payload: {}\n  });\n};\nexport const updateNotesInFolder = updatedNotes => dispatch => {\n  dispatch({\n    type: UPDATE_NOTES_IN_FOLDER,\n    payload: updateNotes\n  });\n};","map":{"version":3,"sources":["/Users/justinlong/Documents/react/code-note2/frontend/src/actions/noteActions.js"],"names":["CUR_FOLDER_NOTES","SELECTED_NOTE","CUR_EDITOR_JSON","SELECT_NOTE","DELETE_FOLDER","DELETE_NOTE","UPDATE_NOTES_IN_FOLDER","axios","notesInFolder","folder","dispatch","post","then","res","data","notes","updatedNotes","map","n","selected","type","payload","getSelectedNote","id","selectedNote","find","note","_id","setCurEditorValue","value","selectNote","deleteNotesInFolder","deleteSelectedNote","updateNotesInFolder","updateNotes"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,eAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,WANJ,EAOIC,sBAPJ,QAQO,SARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAIC,MAAD,IAAaC,QAAD,IAAc;AACnDH,EAAAA,KAAK,CACAI,IADL,CACU,gBADV,EAC4B;AACpBF,IAAAA,MAAM,EAAEA;AADY,GAD5B,EAIKG,IAJL,CAIWC,GAAD,IAAS;AACX,WAAOA,GAAG,CAACC,IAAX;AACH,GANL,EAOKF,IAPL,CAOWG,KAAD,IAAW;AACb,UAAMC,YAAY,GAAGD,KAAK,CAACE,GAAN,CAAWC,CAAD,IAAO;AAClC,aAAO,EAAE,GAAGA,CAAL;AAAQC,QAAAA,QAAQ,EAAE;AAAlB,OAAP;AACH,KAFoB,CAArB;AAGAT,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEpB,gBADD;AAELqB,MAAAA,OAAO,EAAEL;AAFJ,KAAD,CAAR;AAIH,GAfL;AAgBH,CAjBM;AAmBP,OAAO,MAAMM,eAAe,GAAG,CAACC,EAAD,EAAKR,KAAL,KAAgBL,QAAD,IAAc;AACxD,QAAMc,YAAY,GAAGT,KAAK,CAACU,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,EAAlC,CAArB;AACAb,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEnB,aAAR;AAAuBoB,IAAAA,OAAO,EAAEG;AAAhC,GAAD,CAAR;AACH,CAHM;AAKP,OAAO,MAAMI,iBAAiB,GAAIC,KAAD,IAAYnB,QAAD,IAAc;AACtDA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAElB,eAAR;AAAyBmB,IAAAA,OAAO,EAAEQ;AAAlC,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMC,UAAU,GAAId,YAAD,IAAmBN,QAAD,IAAc;AACtDA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEjB,WAAR;AAAqBkB,IAAAA,OAAO,EAAEL;AAA9B,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMe,mBAAmB,GAAG,MAAOrB,QAAD,IAAc;AACnDA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEhB,aAAR;AAAuBiB,IAAAA,OAAO,EAAE;AAAhC,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMW,kBAAkB,GAAG,MAAOtB,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEf,WAAR;AAAqBgB,IAAAA,OAAO,EAAE;AAA9B,GAAD,CAAR;AACH,CAFM;AAIP,OAAO,MAAMY,mBAAmB,GAAIjB,YAAD,IAAmBN,QAAD,IAAc;AAC/DA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEd,sBAAR;AAAgCe,IAAAA,OAAO,EAAEa;AAAzC,GAAD,CAAR;AACH,CAFM","sourcesContent":["import {\n    CUR_FOLDER_NOTES,\n    SELECTED_NOTE,\n    CUR_EDITOR_JSON,\n    SELECT_NOTE,\n    DELETE_FOLDER,\n    DELETE_NOTE,\n    UPDATE_NOTES_IN_FOLDER,\n} from './types';\nimport axios from 'axios';\n\nexport const notesInFolder = (folder) => (dispatch) => {\n    axios\n        .post('/notesInFolder', {\n            folder: folder,\n        })\n        .then((res) => {\n            return res.data;\n        })\n        .then((notes) => {\n            const updatedNotes = notes.map((n) => {\n                return { ...n, selected: false };\n            });\n            dispatch({\n                type: CUR_FOLDER_NOTES,\n                payload: updatedNotes,\n            });\n        });\n};\n\nexport const getSelectedNote = (id, notes) => (dispatch) => {\n    const selectedNote = notes.find((note) => note._id === id);\n    dispatch({ type: SELECTED_NOTE, payload: selectedNote });\n};\n\nexport const setCurEditorValue = (value) => (dispatch) => {\n    dispatch({ type: CUR_EDITOR_JSON, payload: value });\n};\n\nexport const selectNote = (updatedNotes) => (dispatch) => {\n    dispatch({ type: SELECT_NOTE, payload: updatedNotes });\n};\n\nexport const deleteNotesInFolder = () => (dispatch) => {\n    dispatch({ type: DELETE_FOLDER, payload: [] });\n};\n\nexport const deleteSelectedNote = () => (dispatch) => {\n    dispatch({ type: DELETE_NOTE, payload: {} });\n};\n\nexport const updateNotesInFolder = (updatedNotes) => (dispatch) => {\n    dispatch({ type: UPDATE_NOTES_IN_FOLDER, payload: updateNotes });\n};\n"]},"metadata":{},"sourceType":"module"}